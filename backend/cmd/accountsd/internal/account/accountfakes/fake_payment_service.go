// Code generated by counterfeiter. DO NOT EDIT.
package accountfakes

import (
	"context"
	"sync"

	"github.com/JordanRad/play-j/backend/cmd/accountsd/internal/account"
	paymentpb "github.com/JordanRad/play-j/backend/internal/paymentservice/gen/grpc/payment/pb"
	"google.golang.org/grpc"
)

type FakePaymentService struct {
	GetPaymentsByAccountIDStub        func(context.Context, *paymentpb.GetPaymentsByAccountIDRequest, ...grpc.CallOption) (*paymentpb.GetPaymentsByAccountIDResponse, error)
	getPaymentsByAccountIDMutex       sync.RWMutex
	getPaymentsByAccountIDArgsForCall []struct {
		arg1 context.Context
		arg2 *paymentpb.GetPaymentsByAccountIDRequest
		arg3 []grpc.CallOption
	}
	getPaymentsByAccountIDReturns struct {
		result1 *paymentpb.GetPaymentsByAccountIDResponse
		result2 error
	}
	getPaymentsByAccountIDReturnsOnCall map[int]struct {
		result1 *paymentpb.GetPaymentsByAccountIDResponse
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePaymentService) GetPaymentsByAccountID(arg1 context.Context, arg2 *paymentpb.GetPaymentsByAccountIDRequest, arg3 ...grpc.CallOption) (*paymentpb.GetPaymentsByAccountIDResponse, error) {
	fake.getPaymentsByAccountIDMutex.Lock()
	ret, specificReturn := fake.getPaymentsByAccountIDReturnsOnCall[len(fake.getPaymentsByAccountIDArgsForCall)]
	fake.getPaymentsByAccountIDArgsForCall = append(fake.getPaymentsByAccountIDArgsForCall, struct {
		arg1 context.Context
		arg2 *paymentpb.GetPaymentsByAccountIDRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	stub := fake.GetPaymentsByAccountIDStub
	fakeReturns := fake.getPaymentsByAccountIDReturns
	fake.recordInvocation("GetPaymentsByAccountID", []interface{}{arg1, arg2, arg3})
	fake.getPaymentsByAccountIDMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePaymentService) GetPaymentsByAccountIDCallCount() int {
	fake.getPaymentsByAccountIDMutex.RLock()
	defer fake.getPaymentsByAccountIDMutex.RUnlock()
	return len(fake.getPaymentsByAccountIDArgsForCall)
}

func (fake *FakePaymentService) GetPaymentsByAccountIDCalls(stub func(context.Context, *paymentpb.GetPaymentsByAccountIDRequest, ...grpc.CallOption) (*paymentpb.GetPaymentsByAccountIDResponse, error)) {
	fake.getPaymentsByAccountIDMutex.Lock()
	defer fake.getPaymentsByAccountIDMutex.Unlock()
	fake.GetPaymentsByAccountIDStub = stub
}

func (fake *FakePaymentService) GetPaymentsByAccountIDArgsForCall(i int) (context.Context, *paymentpb.GetPaymentsByAccountIDRequest, []grpc.CallOption) {
	fake.getPaymentsByAccountIDMutex.RLock()
	defer fake.getPaymentsByAccountIDMutex.RUnlock()
	argsForCall := fake.getPaymentsByAccountIDArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakePaymentService) GetPaymentsByAccountIDReturns(result1 *paymentpb.GetPaymentsByAccountIDResponse, result2 error) {
	fake.getPaymentsByAccountIDMutex.Lock()
	defer fake.getPaymentsByAccountIDMutex.Unlock()
	fake.GetPaymentsByAccountIDStub = nil
	fake.getPaymentsByAccountIDReturns = struct {
		result1 *paymentpb.GetPaymentsByAccountIDResponse
		result2 error
	}{result1, result2}
}

func (fake *FakePaymentService) GetPaymentsByAccountIDReturnsOnCall(i int, result1 *paymentpb.GetPaymentsByAccountIDResponse, result2 error) {
	fake.getPaymentsByAccountIDMutex.Lock()
	defer fake.getPaymentsByAccountIDMutex.Unlock()
	fake.GetPaymentsByAccountIDStub = nil
	if fake.getPaymentsByAccountIDReturnsOnCall == nil {
		fake.getPaymentsByAccountIDReturnsOnCall = make(map[int]struct {
			result1 *paymentpb.GetPaymentsByAccountIDResponse
			result2 error
		})
	}
	fake.getPaymentsByAccountIDReturnsOnCall[i] = struct {
		result1 *paymentpb.GetPaymentsByAccountIDResponse
		result2 error
	}{result1, result2}
}

func (fake *FakePaymentService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getPaymentsByAccountIDMutex.RLock()
	defer fake.getPaymentsByAccountIDMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePaymentService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ account.PaymentService = new(FakePaymentService)
