// Code generated by counterfeiter. DO NOT EDIT.
package paymentfakes

import (
	"context"
	"sync"

	payments "github.com/JordanRad/play-j/backend/cmd/paymentsd/internal/payment"
)

type FakeSubscriptionStore struct {
	CreateSubscriptionStub        func(context.Context, uint) error
	createSubscriptionMutex       sync.RWMutex
	createSubscriptionArgsForCall []struct {
		arg1 context.Context
		arg2 uint
	}
	createSubscriptionReturns struct {
		result1 error
	}
	createSubscriptionReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSubscriptionStore) CreateSubscription(arg1 context.Context, arg2 uint) error {
	fake.createSubscriptionMutex.Lock()
	ret, specificReturn := fake.createSubscriptionReturnsOnCall[len(fake.createSubscriptionArgsForCall)]
	fake.createSubscriptionArgsForCall = append(fake.createSubscriptionArgsForCall, struct {
		arg1 context.Context
		arg2 uint
	}{arg1, arg2})
	stub := fake.CreateSubscriptionStub
	fakeReturns := fake.createSubscriptionReturns
	fake.recordInvocation("CreateSubscription", []interface{}{arg1, arg2})
	fake.createSubscriptionMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSubscriptionStore) CreateSubscriptionCallCount() int {
	fake.createSubscriptionMutex.RLock()
	defer fake.createSubscriptionMutex.RUnlock()
	return len(fake.createSubscriptionArgsForCall)
}

func (fake *FakeSubscriptionStore) CreateSubscriptionCalls(stub func(context.Context, uint) error) {
	fake.createSubscriptionMutex.Lock()
	defer fake.createSubscriptionMutex.Unlock()
	fake.CreateSubscriptionStub = stub
}

func (fake *FakeSubscriptionStore) CreateSubscriptionArgsForCall(i int) (context.Context, uint) {
	fake.createSubscriptionMutex.RLock()
	defer fake.createSubscriptionMutex.RUnlock()
	argsForCall := fake.createSubscriptionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSubscriptionStore) CreateSubscriptionReturns(result1 error) {
	fake.createSubscriptionMutex.Lock()
	defer fake.createSubscriptionMutex.Unlock()
	fake.CreateSubscriptionStub = nil
	fake.createSubscriptionReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSubscriptionStore) CreateSubscriptionReturnsOnCall(i int, result1 error) {
	fake.createSubscriptionMutex.Lock()
	defer fake.createSubscriptionMutex.Unlock()
	fake.CreateSubscriptionStub = nil
	if fake.createSubscriptionReturnsOnCall == nil {
		fake.createSubscriptionReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createSubscriptionReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSubscriptionStore) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createSubscriptionMutex.RLock()
	defer fake.createSubscriptionMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSubscriptionStore) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ payments.SubscriptionStore = new(FakeSubscriptionStore)
