// Code generated by counterfeiter. DO NOT EDIT.
package paymentfakes

import (
	"context"
	"sync"

	"github.com/JordanRad/play-j/backend/cmd/paymentsd/internal/db/dbmodels"
	payments "github.com/JordanRad/play-j/backend/cmd/paymentsd/internal/payment"
)

type FakePaymentStore struct {
	CreatePaymentStub        func(context.Context, uint, float32) (*dbmodels.PaymentDetails, error)
	createPaymentMutex       sync.RWMutex
	createPaymentArgsForCall []struct {
		arg1 context.Context
		arg2 uint
		arg3 float32
	}
	createPaymentReturns struct {
		result1 *dbmodels.PaymentDetails
		result2 error
	}
	createPaymentReturnsOnCall map[int]struct {
		result1 *dbmodels.PaymentDetails
		result2 error
	}
	GetAccountPaymentsStub        func(context.Context, uint, uint) ([]*dbmodels.Payment, error)
	getAccountPaymentsMutex       sync.RWMutex
	getAccountPaymentsArgsForCall []struct {
		arg1 context.Context
		arg2 uint
		arg3 uint
	}
	getAccountPaymentsReturns struct {
		result1 []*dbmodels.Payment
		result2 error
	}
	getAccountPaymentsReturnsOnCall map[int]struct {
		result1 []*dbmodels.Payment
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePaymentStore) CreatePayment(arg1 context.Context, arg2 uint, arg3 float32) (*dbmodels.PaymentDetails, error) {
	fake.createPaymentMutex.Lock()
	ret, specificReturn := fake.createPaymentReturnsOnCall[len(fake.createPaymentArgsForCall)]
	fake.createPaymentArgsForCall = append(fake.createPaymentArgsForCall, struct {
		arg1 context.Context
		arg2 uint
		arg3 float32
	}{arg1, arg2, arg3})
	stub := fake.CreatePaymentStub
	fakeReturns := fake.createPaymentReturns
	fake.recordInvocation("CreatePayment", []interface{}{arg1, arg2, arg3})
	fake.createPaymentMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePaymentStore) CreatePaymentCallCount() int {
	fake.createPaymentMutex.RLock()
	defer fake.createPaymentMutex.RUnlock()
	return len(fake.createPaymentArgsForCall)
}

func (fake *FakePaymentStore) CreatePaymentCalls(stub func(context.Context, uint, float32) (*dbmodels.PaymentDetails, error)) {
	fake.createPaymentMutex.Lock()
	defer fake.createPaymentMutex.Unlock()
	fake.CreatePaymentStub = stub
}

func (fake *FakePaymentStore) CreatePaymentArgsForCall(i int) (context.Context, uint, float32) {
	fake.createPaymentMutex.RLock()
	defer fake.createPaymentMutex.RUnlock()
	argsForCall := fake.createPaymentArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakePaymentStore) CreatePaymentReturns(result1 *dbmodels.PaymentDetails, result2 error) {
	fake.createPaymentMutex.Lock()
	defer fake.createPaymentMutex.Unlock()
	fake.CreatePaymentStub = nil
	fake.createPaymentReturns = struct {
		result1 *dbmodels.PaymentDetails
		result2 error
	}{result1, result2}
}

func (fake *FakePaymentStore) CreatePaymentReturnsOnCall(i int, result1 *dbmodels.PaymentDetails, result2 error) {
	fake.createPaymentMutex.Lock()
	defer fake.createPaymentMutex.Unlock()
	fake.CreatePaymentStub = nil
	if fake.createPaymentReturnsOnCall == nil {
		fake.createPaymentReturnsOnCall = make(map[int]struct {
			result1 *dbmodels.PaymentDetails
			result2 error
		})
	}
	fake.createPaymentReturnsOnCall[i] = struct {
		result1 *dbmodels.PaymentDetails
		result2 error
	}{result1, result2}
}

func (fake *FakePaymentStore) GetAccountPayments(arg1 context.Context, arg2 uint, arg3 uint) ([]*dbmodels.Payment, error) {
	fake.getAccountPaymentsMutex.Lock()
	ret, specificReturn := fake.getAccountPaymentsReturnsOnCall[len(fake.getAccountPaymentsArgsForCall)]
	fake.getAccountPaymentsArgsForCall = append(fake.getAccountPaymentsArgsForCall, struct {
		arg1 context.Context
		arg2 uint
		arg3 uint
	}{arg1, arg2, arg3})
	stub := fake.GetAccountPaymentsStub
	fakeReturns := fake.getAccountPaymentsReturns
	fake.recordInvocation("GetAccountPayments", []interface{}{arg1, arg2, arg3})
	fake.getAccountPaymentsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePaymentStore) GetAccountPaymentsCallCount() int {
	fake.getAccountPaymentsMutex.RLock()
	defer fake.getAccountPaymentsMutex.RUnlock()
	return len(fake.getAccountPaymentsArgsForCall)
}

func (fake *FakePaymentStore) GetAccountPaymentsCalls(stub func(context.Context, uint, uint) ([]*dbmodels.Payment, error)) {
	fake.getAccountPaymentsMutex.Lock()
	defer fake.getAccountPaymentsMutex.Unlock()
	fake.GetAccountPaymentsStub = stub
}

func (fake *FakePaymentStore) GetAccountPaymentsArgsForCall(i int) (context.Context, uint, uint) {
	fake.getAccountPaymentsMutex.RLock()
	defer fake.getAccountPaymentsMutex.RUnlock()
	argsForCall := fake.getAccountPaymentsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakePaymentStore) GetAccountPaymentsReturns(result1 []*dbmodels.Payment, result2 error) {
	fake.getAccountPaymentsMutex.Lock()
	defer fake.getAccountPaymentsMutex.Unlock()
	fake.GetAccountPaymentsStub = nil
	fake.getAccountPaymentsReturns = struct {
		result1 []*dbmodels.Payment
		result2 error
	}{result1, result2}
}

func (fake *FakePaymentStore) GetAccountPaymentsReturnsOnCall(i int, result1 []*dbmodels.Payment, result2 error) {
	fake.getAccountPaymentsMutex.Lock()
	defer fake.getAccountPaymentsMutex.Unlock()
	fake.GetAccountPaymentsStub = nil
	if fake.getAccountPaymentsReturnsOnCall == nil {
		fake.getAccountPaymentsReturnsOnCall = make(map[int]struct {
			result1 []*dbmodels.Payment
			result2 error
		})
	}
	fake.getAccountPaymentsReturnsOnCall[i] = struct {
		result1 []*dbmodels.Payment
		result2 error
	}{result1, result2}
}

func (fake *FakePaymentStore) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createPaymentMutex.RLock()
	defer fake.createPaymentMutex.RUnlock()
	fake.getAccountPaymentsMutex.RLock()
	defer fake.getAccountPaymentsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePaymentStore) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ payments.PaymentStore = new(FakePaymentStore)
