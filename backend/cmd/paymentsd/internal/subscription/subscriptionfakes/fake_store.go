// Code generated by counterfeiter. DO NOT EDIT.
package subscriptionfakes

import (
	"context"
	"sync"

	"github.com/JordanRad/play-j/backend/cmd/paymentsd/internal/db/dbmodels"
	"github.com/JordanRad/play-j/backend/cmd/paymentsd/internal/subscription"
)

type FakeStore struct {
	GetAccountSubscriptionStub        func(context.Context, uint) (*dbmodels.Subscription, error)
	getAccountSubscriptionMutex       sync.RWMutex
	getAccountSubscriptionArgsForCall []struct {
		arg1 context.Context
		arg2 uint
	}
	getAccountSubscriptionReturns struct {
		result1 *dbmodels.Subscription
		result2 error
	}
	getAccountSubscriptionReturnsOnCall map[int]struct {
		result1 *dbmodels.Subscription
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStore) GetAccountSubscription(arg1 context.Context, arg2 uint) (*dbmodels.Subscription, error) {
	fake.getAccountSubscriptionMutex.Lock()
	ret, specificReturn := fake.getAccountSubscriptionReturnsOnCall[len(fake.getAccountSubscriptionArgsForCall)]
	fake.getAccountSubscriptionArgsForCall = append(fake.getAccountSubscriptionArgsForCall, struct {
		arg1 context.Context
		arg2 uint
	}{arg1, arg2})
	stub := fake.GetAccountSubscriptionStub
	fakeReturns := fake.getAccountSubscriptionReturns
	fake.recordInvocation("GetAccountSubscription", []interface{}{arg1, arg2})
	fake.getAccountSubscriptionMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeStore) GetAccountSubscriptionCallCount() int {
	fake.getAccountSubscriptionMutex.RLock()
	defer fake.getAccountSubscriptionMutex.RUnlock()
	return len(fake.getAccountSubscriptionArgsForCall)
}

func (fake *FakeStore) GetAccountSubscriptionCalls(stub func(context.Context, uint) (*dbmodels.Subscription, error)) {
	fake.getAccountSubscriptionMutex.Lock()
	defer fake.getAccountSubscriptionMutex.Unlock()
	fake.GetAccountSubscriptionStub = stub
}

func (fake *FakeStore) GetAccountSubscriptionArgsForCall(i int) (context.Context, uint) {
	fake.getAccountSubscriptionMutex.RLock()
	defer fake.getAccountSubscriptionMutex.RUnlock()
	argsForCall := fake.getAccountSubscriptionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeStore) GetAccountSubscriptionReturns(result1 *dbmodels.Subscription, result2 error) {
	fake.getAccountSubscriptionMutex.Lock()
	defer fake.getAccountSubscriptionMutex.Unlock()
	fake.GetAccountSubscriptionStub = nil
	fake.getAccountSubscriptionReturns = struct {
		result1 *dbmodels.Subscription
		result2 error
	}{result1, result2}
}

func (fake *FakeStore) GetAccountSubscriptionReturnsOnCall(i int, result1 *dbmodels.Subscription, result2 error) {
	fake.getAccountSubscriptionMutex.Lock()
	defer fake.getAccountSubscriptionMutex.Unlock()
	fake.GetAccountSubscriptionStub = nil
	if fake.getAccountSubscriptionReturnsOnCall == nil {
		fake.getAccountSubscriptionReturnsOnCall = make(map[int]struct {
			result1 *dbmodels.Subscription
			result2 error
		})
	}
	fake.getAccountSubscriptionReturnsOnCall[i] = struct {
		result1 *dbmodels.Subscription
		result2 error
	}{result1, result2}
}

func (fake *FakeStore) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getAccountSubscriptionMutex.RLock()
	defer fake.getAccountSubscriptionMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStore) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ subscription.Store = new(FakeStore)
