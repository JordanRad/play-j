// Code generated by goa v3.5.5, DO NOT EDIT.
//
// playlist client HTTP transport
//
// Command:
// $ goa gen
// github.com/JordanRad/play-j/backend/internal/design/account-service -o
// ./internal/

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the playlist service endpoint HTTP clients.
type Client struct {
	// GetAccountPlaylistCollection Doer is the HTTP client used to make requests
	// to the getAccountPlaylistCollection endpoint.
	GetAccountPlaylistCollectionDoer goahttp.Doer

	// CreateAccountPlaylist Doer is the HTTP client used to make requests to the
	// createAccountPlaylist endpoint.
	CreateAccountPlaylistDoer goahttp.Doer

	// RenameAccountPlaylist Doer is the HTTP client used to make requests to the
	// renameAccountPlaylist endpoint.
	RenameAccountPlaylistDoer goahttp.Doer

	// DeleteAccountPlaylist Doer is the HTTP client used to make requests to the
	// deleteAccountPlaylist endpoint.
	DeleteAccountPlaylistDoer goahttp.Doer

	// GetAccountPlaylist Doer is the HTTP client used to make requests to the
	// getAccountPlaylist endpoint.
	GetAccountPlaylistDoer goahttp.Doer

	// AddTrackToAccountPlaylist Doer is the HTTP client used to make requests to
	// the addTrackToAccountPlaylist endpoint.
	AddTrackToAccountPlaylistDoer goahttp.Doer

	// RemoveTrackFromAccountPlaylist Doer is the HTTP client used to make requests
	// to the removeTrackFromAccountPlaylist endpoint.
	RemoveTrackFromAccountPlaylistDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the playlist service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		GetAccountPlaylistCollectionDoer:   doer,
		CreateAccountPlaylistDoer:          doer,
		RenameAccountPlaylistDoer:          doer,
		DeleteAccountPlaylistDoer:          doer,
		GetAccountPlaylistDoer:             doer,
		AddTrackToAccountPlaylistDoer:      doer,
		RemoveTrackFromAccountPlaylistDoer: doer,
		RestoreResponseBody:                restoreBody,
		scheme:                             scheme,
		host:                               host,
		decoder:                            dec,
		encoder:                            enc,
	}
}

// GetAccountPlaylistCollection returns an endpoint that makes HTTP requests to
// the playlist service getAccountPlaylistCollection server.
func (c *Client) GetAccountPlaylistCollection() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetAccountPlaylistCollectionRequest(c.encoder)
		decodeResponse = DecodeGetAccountPlaylistCollectionResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetAccountPlaylistCollectionRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetAccountPlaylistCollectionDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("playlist", "getAccountPlaylistCollection", err)
		}
		return decodeResponse(resp)
	}
}

// CreateAccountPlaylist returns an endpoint that makes HTTP requests to the
// playlist service createAccountPlaylist server.
func (c *Client) CreateAccountPlaylist() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateAccountPlaylistRequest(c.encoder)
		decodeResponse = DecodeCreateAccountPlaylistResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildCreateAccountPlaylistRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateAccountPlaylistDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("playlist", "createAccountPlaylist", err)
		}
		return decodeResponse(resp)
	}
}

// RenameAccountPlaylist returns an endpoint that makes HTTP requests to the
// playlist service renameAccountPlaylist server.
func (c *Client) RenameAccountPlaylist() goa.Endpoint {
	var (
		encodeRequest  = EncodeRenameAccountPlaylistRequest(c.encoder)
		decodeResponse = DecodeRenameAccountPlaylistResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildRenameAccountPlaylistRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.RenameAccountPlaylistDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("playlist", "renameAccountPlaylist", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteAccountPlaylist returns an endpoint that makes HTTP requests to the
// playlist service deleteAccountPlaylist server.
func (c *Client) DeleteAccountPlaylist() goa.Endpoint {
	var (
		encodeRequest  = EncodeDeleteAccountPlaylistRequest(c.encoder)
		decodeResponse = DecodeDeleteAccountPlaylistResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildDeleteAccountPlaylistRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteAccountPlaylistDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("playlist", "deleteAccountPlaylist", err)
		}
		return decodeResponse(resp)
	}
}

// GetAccountPlaylist returns an endpoint that makes HTTP requests to the
// playlist service getAccountPlaylist server.
func (c *Client) GetAccountPlaylist() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetAccountPlaylistRequest(c.encoder)
		decodeResponse = DecodeGetAccountPlaylistResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetAccountPlaylistRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetAccountPlaylistDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("playlist", "getAccountPlaylist", err)
		}
		return decodeResponse(resp)
	}
}

// AddTrackToAccountPlaylist returns an endpoint that makes HTTP requests to
// the playlist service addTrackToAccountPlaylist server.
func (c *Client) AddTrackToAccountPlaylist() goa.Endpoint {
	var (
		encodeRequest  = EncodeAddTrackToAccountPlaylistRequest(c.encoder)
		decodeResponse = DecodeAddTrackToAccountPlaylistResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildAddTrackToAccountPlaylistRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.AddTrackToAccountPlaylistDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("playlist", "addTrackToAccountPlaylist", err)
		}
		return decodeResponse(resp)
	}
}

// RemoveTrackFromAccountPlaylist returns an endpoint that makes HTTP requests
// to the playlist service removeTrackFromAccountPlaylist server.
func (c *Client) RemoveTrackFromAccountPlaylist() goa.Endpoint {
	var (
		encodeRequest  = EncodeRemoveTrackFromAccountPlaylistRequest(c.encoder)
		decodeResponse = DecodeRemoveTrackFromAccountPlaylistResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildRemoveTrackFromAccountPlaylistRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.RemoveTrackFromAccountPlaylistDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("playlist", "removeTrackFromAccountPlaylist", err)
		}
		return decodeResponse(resp)
	}
}
