// Code generated by goa v3.5.5, DO NOT EDIT.
//
// accounts HTTP client CLI support package
//
// Command:
// $ goa gen git.fhict.nl/I425652/jordan-portfolio-s6/backend/internal/design
// -o ./internal/

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	accountc "git.fhict.nl/I425652/jordan-portfolio-s6/backend/internal/gen/http/account/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `account (register|login|get-user-playlists)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` account register --body '{
      "confirmedPassword": "Corporis voluptas et.",
      "email": "Cum sed reprehenderit et alias asperiores.",
      "password": "Magnam voluptatem sunt maiores quo est est."
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		accountFlags = flag.NewFlagSet("account", flag.ContinueOnError)

		accountRegisterFlags    = flag.NewFlagSet("register", flag.ExitOnError)
		accountRegisterBodyFlag = accountRegisterFlags.String("body", "REQUIRED", "")

		accountLoginFlags    = flag.NewFlagSet("login", flag.ExitOnError)
		accountLoginBodyFlag = accountLoginFlags.String("body", "REQUIRED", "")

		accountGetUserPlaylistsFlags         = flag.NewFlagSet("get-user-playlists", flag.ExitOnError)
		accountGetUserPlaylistsAccountIDFlag = accountGetUserPlaylistsFlags.String("account-id", "REQUIRED", "")
		accountGetUserPlaylistsAuthFlag      = accountGetUserPlaylistsFlags.String("auth", "", "")
	)
	accountFlags.Usage = accountUsage
	accountRegisterFlags.Usage = accountRegisterUsage
	accountLoginFlags.Usage = accountLoginUsage
	accountGetUserPlaylistsFlags.Usage = accountGetUserPlaylistsUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "account":
			svcf = accountFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "account":
			switch epn {
			case "register":
				epf = accountRegisterFlags

			case "login":
				epf = accountLoginFlags

			case "get-user-playlists":
				epf = accountGetUserPlaylistsFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "account":
			c := accountc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "register":
				endpoint = c.Register()
				data, err = accountc.BuildRegisterPayload(*accountRegisterBodyFlag)
			case "login":
				endpoint = c.Login()
				data, err = accountc.BuildLoginPayload(*accountLoginBodyFlag)
			case "get-user-playlists":
				endpoint = c.GetUserPlaylists()
				data, err = accountc.BuildGetUserPlaylistsPayload(*accountGetUserPlaylistsAccountIDFlag, *accountGetUserPlaylistsAuthFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// accountUsage displays the usage of the account command and its subcommands.
func accountUsage() {
	fmt.Fprintf(os.Stderr, `Account operations
Usage:
    %[1]s [globalflags] account COMMAND [flags]

COMMAND:
    register: Register implements register.
    login: Login implements login.
    get-user-playlists: GetUserPlaylists implements getUserPlaylists.

Additional help:
    %[1]s account COMMAND --help
`, os.Args[0])
}
func accountRegisterUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] account register -body JSON

Register implements register.
    -body JSON: 

Example:
    %[1]s account register --body '{
      "confirmedPassword": "Corporis voluptas et.",
      "email": "Cum sed reprehenderit et alias asperiores.",
      "password": "Magnam voluptatem sunt maiores quo est est."
   }'
`, os.Args[0])
}

func accountLoginUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] account login -body JSON

Login implements login.
    -body JSON: 

Example:
    %[1]s account login --body '{
      "email": "Ex dolorum.",
      "password": "Sit aperiam."
   }'
`, os.Args[0])
}

func accountGetUserPlaylistsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] account get-user-playlists -account-id UINT -auth STRING

GetUserPlaylists implements getUserPlaylists.
    -account-id UINT: 
    -auth STRING: 

Example:
    %[1]s account get-user-playlists --account-id 9197517201641083092 --auth "Dolorum et labore cumque quisquam dolorem adipisci."
`, os.Args[0])
}
