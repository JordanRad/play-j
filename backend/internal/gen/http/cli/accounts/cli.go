// Code generated by goa v3.5.5, DO NOT EDIT.
//
// accounts HTTP client CLI support package
//
// Command:
// $ goa gen github.com/JordanRad/play-j/backend/internal/design -o ./internal/

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	accountc "github.com/JordanRad/play-j/backend/internal/gen/http/account/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `account (register|login|get-account-playlist-collection|create-account-playlist|delete-account-playlist|get-account-playlist|add-track-to-account-playlist|remove-track-from-account-playlist)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` account register --body '{
      "confirmedPassword": "Numquam quos excepturi vero ad est.",
      "email": "Cumque quisquam dolorem adipisci.",
      "firstName": "Eos quis ut ut ipsum.",
      "lastName": "Molestiae voluptas dolorum et.",
      "password": "Voluptates id recusandae temporibus et dolore."
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		accountFlags = flag.NewFlagSet("account", flag.ContinueOnError)

		accountRegisterFlags    = flag.NewFlagSet("register", flag.ExitOnError)
		accountRegisterBodyFlag = accountRegisterFlags.String("body", "REQUIRED", "")

		accountLoginFlags    = flag.NewFlagSet("login", flag.ExitOnError)
		accountLoginBodyFlag = accountLoginFlags.String("body", "REQUIRED", "")

		accountGetAccountPlaylistCollectionFlags         = flag.NewFlagSet("get-account-playlist-collection", flag.ExitOnError)
		accountGetAccountPlaylistCollectionAccountIDFlag = accountGetAccountPlaylistCollectionFlags.String("account-id", "REQUIRED", "")
		accountGetAccountPlaylistCollectionAuthFlag      = accountGetAccountPlaylistCollectionFlags.String("auth", "", "")

		accountCreateAccountPlaylistFlags         = flag.NewFlagSet("create-account-playlist", flag.ExitOnError)
		accountCreateAccountPlaylistBodyFlag      = accountCreateAccountPlaylistFlags.String("body", "REQUIRED", "")
		accountCreateAccountPlaylistAccountIDFlag = accountCreateAccountPlaylistFlags.String("account-id", "REQUIRED", "Account ID")
		accountCreateAccountPlaylistAuthFlag      = accountCreateAccountPlaylistFlags.String("auth", "", "")

		accountDeleteAccountPlaylistFlags          = flag.NewFlagSet("delete-account-playlist", flag.ExitOnError)
		accountDeleteAccountPlaylistAccountIDFlag  = accountDeleteAccountPlaylistFlags.String("account-id", "REQUIRED", "")
		accountDeleteAccountPlaylistPlaylistIDFlag = accountDeleteAccountPlaylistFlags.String("playlist-id", "REQUIRED", "")
		accountDeleteAccountPlaylistAuthFlag       = accountDeleteAccountPlaylistFlags.String("auth", "", "")

		accountGetAccountPlaylistFlags          = flag.NewFlagSet("get-account-playlist", flag.ExitOnError)
		accountGetAccountPlaylistAccountIDFlag  = accountGetAccountPlaylistFlags.String("account-id", "REQUIRED", "Account ID")
		accountGetAccountPlaylistPlaylistIDFlag = accountGetAccountPlaylistFlags.String("playlist-id", "REQUIRED", "Playlist ID")
		accountGetAccountPlaylistAuthFlag       = accountGetAccountPlaylistFlags.String("auth", "", "")

		accountAddTrackToAccountPlaylistFlags          = flag.NewFlagSet("add-track-to-account-playlist", flag.ExitOnError)
		accountAddTrackToAccountPlaylistAccountIDFlag  = accountAddTrackToAccountPlaylistFlags.String("account-id", "REQUIRED", "Account ID")
		accountAddTrackToAccountPlaylistPlaylistIDFlag = accountAddTrackToAccountPlaylistFlags.String("playlist-id", "REQUIRED", "Playlist ID to modify")
		accountAddTrackToAccountPlaylistTrackIDFlag    = accountAddTrackToAccountPlaylistFlags.String("track-id", "REQUIRED", "Track ID to be added")
		accountAddTrackToAccountPlaylistAuthFlag       = accountAddTrackToAccountPlaylistFlags.String("auth", "", "")

		accountRemoveTrackFromAccountPlaylistFlags          = flag.NewFlagSet("remove-track-from-account-playlist", flag.ExitOnError)
		accountRemoveTrackFromAccountPlaylistAccountIDFlag  = accountRemoveTrackFromAccountPlaylistFlags.String("account-id", "REQUIRED", "Account ID")
		accountRemoveTrackFromAccountPlaylistPlaylistIDFlag = accountRemoveTrackFromAccountPlaylistFlags.String("playlist-id", "REQUIRED", "Playlist ID to modify")
		accountRemoveTrackFromAccountPlaylistTrackIDFlag    = accountRemoveTrackFromAccountPlaylistFlags.String("track-id", "REQUIRED", "Track ID to be deleted")
		accountRemoveTrackFromAccountPlaylistAuthFlag       = accountRemoveTrackFromAccountPlaylistFlags.String("auth", "", "")
	)
	accountFlags.Usage = accountUsage
	accountRegisterFlags.Usage = accountRegisterUsage
	accountLoginFlags.Usage = accountLoginUsage
	accountGetAccountPlaylistCollectionFlags.Usage = accountGetAccountPlaylistCollectionUsage
	accountCreateAccountPlaylistFlags.Usage = accountCreateAccountPlaylistUsage
	accountDeleteAccountPlaylistFlags.Usage = accountDeleteAccountPlaylistUsage
	accountGetAccountPlaylistFlags.Usage = accountGetAccountPlaylistUsage
	accountAddTrackToAccountPlaylistFlags.Usage = accountAddTrackToAccountPlaylistUsage
	accountRemoveTrackFromAccountPlaylistFlags.Usage = accountRemoveTrackFromAccountPlaylistUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "account":
			svcf = accountFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "account":
			switch epn {
			case "register":
				epf = accountRegisterFlags

			case "login":
				epf = accountLoginFlags

			case "get-account-playlist-collection":
				epf = accountGetAccountPlaylistCollectionFlags

			case "create-account-playlist":
				epf = accountCreateAccountPlaylistFlags

			case "delete-account-playlist":
				epf = accountDeleteAccountPlaylistFlags

			case "get-account-playlist":
				epf = accountGetAccountPlaylistFlags

			case "add-track-to-account-playlist":
				epf = accountAddTrackToAccountPlaylistFlags

			case "remove-track-from-account-playlist":
				epf = accountRemoveTrackFromAccountPlaylistFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "account":
			c := accountc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "register":
				endpoint = c.Register()
				data, err = accountc.BuildRegisterPayload(*accountRegisterBodyFlag)
			case "login":
				endpoint = c.Login()
				data, err = accountc.BuildLoginPayload(*accountLoginBodyFlag)
			case "get-account-playlist-collection":
				endpoint = c.GetAccountPlaylistCollection()
				data, err = accountc.BuildGetAccountPlaylistCollectionPayload(*accountGetAccountPlaylistCollectionAccountIDFlag, *accountGetAccountPlaylistCollectionAuthFlag)
			case "create-account-playlist":
				endpoint = c.CreateAccountPlaylist()
				data, err = accountc.BuildCreateAccountPlaylistPayload(*accountCreateAccountPlaylistBodyFlag, *accountCreateAccountPlaylistAccountIDFlag, *accountCreateAccountPlaylistAuthFlag)
			case "delete-account-playlist":
				endpoint = c.DeleteAccountPlaylist()
				data, err = accountc.BuildDeleteAccountPlaylistPayload(*accountDeleteAccountPlaylistAccountIDFlag, *accountDeleteAccountPlaylistPlaylistIDFlag, *accountDeleteAccountPlaylistAuthFlag)
			case "get-account-playlist":
				endpoint = c.GetAccountPlaylist()
				data, err = accountc.BuildGetAccountPlaylistPayload(*accountGetAccountPlaylistAccountIDFlag, *accountGetAccountPlaylistPlaylistIDFlag, *accountGetAccountPlaylistAuthFlag)
			case "add-track-to-account-playlist":
				endpoint = c.AddTrackToAccountPlaylist()
				data, err = accountc.BuildAddTrackToAccountPlaylistPayload(*accountAddTrackToAccountPlaylistAccountIDFlag, *accountAddTrackToAccountPlaylistPlaylistIDFlag, *accountAddTrackToAccountPlaylistTrackIDFlag, *accountAddTrackToAccountPlaylistAuthFlag)
			case "remove-track-from-account-playlist":
				endpoint = c.RemoveTrackFromAccountPlaylist()
				data, err = accountc.BuildRemoveTrackFromAccountPlaylistPayload(*accountRemoveTrackFromAccountPlaylistAccountIDFlag, *accountRemoveTrackFromAccountPlaylistPlaylistIDFlag, *accountRemoveTrackFromAccountPlaylistTrackIDFlag, *accountRemoveTrackFromAccountPlaylistAuthFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// accountUsage displays the usage of the account command and its subcommands.
func accountUsage() {
	fmt.Fprintf(os.Stderr, `Account operations
Usage:
    %[1]s [globalflags] account COMMAND [flags]

COMMAND:
    register: Register implements register.
    login: Login implements login.
    get-account-playlist-collection: GetAccountPlaylistCollection implements getAccountPlaylistCollection.
    create-account-playlist: CreateAccountPlaylist implements createAccountPlaylist.
    delete-account-playlist: DeleteAccountPlaylist implements deleteAccountPlaylist.
    get-account-playlist: GetAccountPlaylist implements getAccountPlaylist.
    add-track-to-account-playlist: AddTrackToAccountPlaylist implements addTrackToAccountPlaylist.
    remove-track-from-account-playlist: RemoveTrackFromAccountPlaylist implements removeTrackFromAccountPlaylist.

Additional help:
    %[1]s account COMMAND --help
`, os.Args[0])
}
func accountRegisterUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] account register -body JSON

Register implements register.
    -body JSON: 

Example:
    %[1]s account register --body '{
      "confirmedPassword": "Numquam quos excepturi vero ad est.",
      "email": "Cumque quisquam dolorem adipisci.",
      "firstName": "Eos quis ut ut ipsum.",
      "lastName": "Molestiae voluptas dolorum et.",
      "password": "Voluptates id recusandae temporibus et dolore."
   }'
`, os.Args[0])
}

func accountLoginUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] account login -body JSON

Login implements login.
    -body JSON: 

Example:
    %[1]s account login --body '{
      "email": "Iusto non mollitia qui non culpa laborum.",
      "password": "Corrupti voluptas officia nostrum quia voluptatum."
   }'
`, os.Args[0])
}

func accountGetAccountPlaylistCollectionUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] account get-account-playlist-collection -account-id UINT -auth STRING

GetAccountPlaylistCollection implements getAccountPlaylistCollection.
    -account-id UINT: 
    -auth STRING: 

Example:
    %[1]s account get-account-playlist-collection --account-id 15798872255790973464 --auth "Corporis aut vero."
`, os.Args[0])
}

func accountCreateAccountPlaylistUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] account create-account-playlist -body JSON -account-id UINT -auth STRING

CreateAccountPlaylist implements createAccountPlaylist.
    -body JSON: 
    -account-id UINT: Account ID
    -auth STRING: 

Example:
    %[1]s account create-account-playlist --body '{
      "name": "Dolor ex."
   }' --account-id 9502402829233404145 --auth "Dolorem et repudiandae cum corporis autem repellendus."
`, os.Args[0])
}

func accountDeleteAccountPlaylistUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] account delete-account-playlist -account-id UINT -playlist-id UINT -auth STRING

DeleteAccountPlaylist implements deleteAccountPlaylist.
    -account-id UINT: 
    -playlist-id UINT: 
    -auth STRING: 

Example:
    %[1]s account delete-account-playlist --account-id 1039585618931551645 --playlist-id 2942327051863868069 --auth "Unde odit sed nostrum."
`, os.Args[0])
}

func accountGetAccountPlaylistUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] account get-account-playlist -account-id UINT -playlist-id UINT -auth STRING

GetAccountPlaylist implements getAccountPlaylist.
    -account-id UINT: Account ID
    -playlist-id UINT: Playlist ID
    -auth STRING: 

Example:
    %[1]s account get-account-playlist --account-id 5397326595089060801 --playlist-id 17902435237536666665 --auth "Dolor et."
`, os.Args[0])
}

func accountAddTrackToAccountPlaylistUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] account add-track-to-account-playlist -account-id UINT -playlist-id UINT -track-id UINT -auth STRING

AddTrackToAccountPlaylist implements addTrackToAccountPlaylist.
    -account-id UINT: Account ID
    -playlist-id UINT: Playlist ID to modify
    -track-id UINT: Track ID to be added
    -auth STRING: 

Example:
    %[1]s account add-track-to-account-playlist --account-id 10727286450490359292 --playlist-id 2101079306531990051 --track-id 9750426786919826982 --auth "Eius et quasi repudiandae."
`, os.Args[0])
}

func accountRemoveTrackFromAccountPlaylistUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] account remove-track-from-account-playlist -account-id UINT -playlist-id UINT -track-id UINT -auth STRING

RemoveTrackFromAccountPlaylist implements removeTrackFromAccountPlaylist.
    -account-id UINT: Account ID
    -playlist-id UINT: Playlist ID to modify
    -track-id UINT: Track ID to be deleted
    -auth STRING: 

Example:
    %[1]s account remove-track-from-account-playlist --account-id 15975472176951581192 --playlist-id 13448498749812279793 --track-id 18231734225788627855 --auth "Voluptate dolor omnis deserunt consectetur ipsa ab."
`, os.Args[0])
}
