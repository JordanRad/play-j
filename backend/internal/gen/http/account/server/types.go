// Code generated by goa v3.5.5, DO NOT EDIT.
//
// account HTTP server types
//
// Command:
// $ goa gen github.com/JordanRad/play-j/backend/internal/design -o ./internal/

package server

import (
	account "github.com/JordanRad/play-j/backend/internal/gen/account"
	goa "goa.design/goa/v3/pkg"
)

// RegisterRequestBody is the type of the "account" service "register" endpoint
// HTTP request body.
type RegisterRequestBody struct {
	// First name of the user
	FirstName *string `form:"firstName,omitempty" json:"firstName,omitempty" xml:"firstName,omitempty"`
	// Last name of the user
	LastName *string `form:"lastName,omitempty" json:"lastName,omitempty" xml:"lastName,omitempty"`
	// Email of the user
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// Password of the user
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
	// Confirmed password of the user
	ConfirmedPassword *string `form:"confirmedPassword,omitempty" json:"confirmedPassword,omitempty" xml:"confirmedPassword,omitempty"`
}

// LoginRequestBody is the type of the "account" service "login" endpoint HTTP
// request body.
type LoginRequestBody struct {
	// Email of the user
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// Password of the user
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// CreateAccountPlaylistRequestBody is the type of the "account" service
// "createAccountPlaylist" endpoint HTTP request body.
type CreateAccountPlaylistRequestBody struct {
	// Playlist name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// RegisterResponseBody is the type of the "account" service "register"
// endpoint HTTP response body.
type RegisterResponseBody struct {
	// Operation completion status
	Message string `form:"message" json:"message" xml:"message"`
}

// LoginResponseBody is the type of the "account" service "login" endpoint HTTP
// response body.
type LoginResponseBody struct {
	// User's email
	Email string `form:"email" json:"email" xml:"email"`
	// JWT Token
	Token string `form:"token" json:"token" xml:"token"`
	// Refresh token
	RefreshToken string `form:"refresh_token" json:"refresh_token" xml:"refresh_token"`
	// User's role
	Role string `form:"role" json:"role" xml:"role"`
	// User's role
	AccountID *string `form:"accountID,omitempty" json:"accountID,omitempty" xml:"accountID,omitempty"`
}

// GetAccountPlaylistCollectionResponseBody is the type of the "account"
// service "getAccountPlaylistCollection" endpoint HTTP response body.
type GetAccountPlaylistCollectionResponseBody struct {
	// Number of resources
	Total int32 `form:"total" json:"total" xml:"total"`
	// Operation completion status
	Resources []*AccountPlaylistResponseResponseBody `form:"resources" json:"resources" xml:"resources"`
}

// CreateAccountPlaylistResponseBody is the type of the "account" service
// "createAccountPlaylist" endpoint HTTP response body.
type CreateAccountPlaylistResponseBody struct {
	// Operation completion status
	Message string `form:"message" json:"message" xml:"message"`
}

// DeleteAccountPlaylistResponseBody is the type of the "account" service
// "deleteAccountPlaylist" endpoint HTTP response body.
type DeleteAccountPlaylistResponseBody struct {
	// Operation completion status
	Message string `form:"message" json:"message" xml:"message"`
}

// GetAccountPlaylistResponseBody is the type of the "account" service
// "getAccountPlaylist" endpoint HTTP response body.
type GetAccountPlaylistResponseBody struct {
	// Playlist id
	ID int32 `form:"id" json:"id" xml:"id"`
	// Playlist name
	Name string `form:"name" json:"name" xml:"name"`
	// Array of TrackIDs
	TrackIDs []int32 `form:"trackIDs" json:"trackIDs" xml:"trackIDs"`
}

// AccountPlaylistResponseResponseBody is used to define fields on response
// body types.
type AccountPlaylistResponseResponseBody struct {
	// Playlist id
	ID int32 `form:"id" json:"id" xml:"id"`
	// Playlist name
	Name string `form:"name" json:"name" xml:"name"`
	// Array of TrackIDs
	TrackIDs []int32 `form:"trackIDs" json:"trackIDs" xml:"trackIDs"`
}

// NewRegisterResponseBody builds the HTTP response body from the result of the
// "register" endpoint of the "account" service.
func NewRegisterResponseBody(res *account.RegisterResponse) *RegisterResponseBody {
	body := &RegisterResponseBody{
		Message: res.Message,
	}
	return body
}

// NewLoginResponseBody builds the HTTP response body from the result of the
// "login" endpoint of the "account" service.
func NewLoginResponseBody(res *account.LoginResponse) *LoginResponseBody {
	body := &LoginResponseBody{
		Email:        res.Email,
		Token:        res.Token,
		RefreshToken: res.RefreshToken,
		Role:         res.Role,
		AccountID:    res.AccountID,
	}
	return body
}

// NewGetAccountPlaylistCollectionResponseBody builds the HTTP response body
// from the result of the "getAccountPlaylistCollection" endpoint of the
// "account" service.
func NewGetAccountPlaylistCollectionResponseBody(res *account.AccountPlaylistCollectionResponse) *GetAccountPlaylistCollectionResponseBody {
	body := &GetAccountPlaylistCollectionResponseBody{
		Total: res.Total,
	}
	if res.Resources != nil {
		body.Resources = make([]*AccountPlaylistResponseResponseBody, len(res.Resources))
		for i, val := range res.Resources {
			body.Resources[i] = marshalAccountAccountPlaylistResponseToAccountPlaylistResponseResponseBody(val)
		}
	}
	return body
}

// NewCreateAccountPlaylistResponseBody builds the HTTP response body from the
// result of the "createAccountPlaylist" endpoint of the "account" service.
func NewCreateAccountPlaylistResponseBody(res *account.CreatePlaylistResponse) *CreateAccountPlaylistResponseBody {
	body := &CreateAccountPlaylistResponseBody{
		Message: res.Message,
	}
	return body
}

// NewDeleteAccountPlaylistResponseBody builds the HTTP response body from the
// result of the "deleteAccountPlaylist" endpoint of the "account" service.
func NewDeleteAccountPlaylistResponseBody(res *account.DeletePlaylistResponse) *DeleteAccountPlaylistResponseBody {
	body := &DeleteAccountPlaylistResponseBody{
		Message: res.Message,
	}
	return body
}

// NewGetAccountPlaylistResponseBody builds the HTTP response body from the
// result of the "getAccountPlaylist" endpoint of the "account" service.
func NewGetAccountPlaylistResponseBody(res *account.AccountPlaylistResponse) *GetAccountPlaylistResponseBody {
	body := &GetAccountPlaylistResponseBody{
		ID:   res.ID,
		Name: res.Name,
	}
	if res.TrackIDs != nil {
		body.TrackIDs = make([]int32, len(res.TrackIDs))
		for i, val := range res.TrackIDs {
			body.TrackIDs[i] = val
		}
	}
	return body
}

// NewRegisterPayload builds a account service register endpoint payload.
func NewRegisterPayload(body *RegisterRequestBody) *account.RegisterPayload {
	v := &account.RegisterPayload{
		FirstName:         *body.FirstName,
		LastName:          *body.LastName,
		Email:             *body.Email,
		Password:          *body.Password,
		ConfirmedPassword: *body.ConfirmedPassword,
	}

	return v
}

// NewLoginPayload builds a account service login endpoint payload.
func NewLoginPayload(body *LoginRequestBody) *account.LoginPayload {
	v := &account.LoginPayload{
		Email:    body.Email,
		Password: body.Password,
	}

	return v
}

// NewGetAccountPlaylistCollectionPayload builds a account service
// getAccountPlaylistCollection endpoint payload.
func NewGetAccountPlaylistCollectionPayload(accountID uint, auth *string) *account.GetAccountPlaylistCollectionPayload {
	v := &account.GetAccountPlaylistCollectionPayload{}
	v.AccountID = &accountID
	v.Auth = auth

	return v
}

// NewCreateAccountPlaylistPayload builds a account service
// createAccountPlaylist endpoint payload.
func NewCreateAccountPlaylistPayload(body *CreateAccountPlaylistRequestBody, accountID uint, auth *string) *account.CreateAccountPlaylistPayload {
	v := &account.CreateAccountPlaylistPayload{
		Name: body.Name,
	}
	v.AccountID = &accountID
	v.Auth = auth

	return v
}

// NewDeleteAccountPlaylistPayload builds a account service
// deleteAccountPlaylist endpoint payload.
func NewDeleteAccountPlaylistPayload(accountID uint, playlistID uint, auth *string) *account.DeleteAccountPlaylistPayload {
	v := &account.DeleteAccountPlaylistPayload{}
	v.AccountID = &accountID
	v.PlaylistID = &playlistID
	v.Auth = auth

	return v
}

// NewGetAccountPlaylistPayload builds a account service getAccountPlaylist
// endpoint payload.
func NewGetAccountPlaylistPayload(accountID uint, playlistID uint, auth *string) *account.GetAccountPlaylistPayload {
	v := &account.GetAccountPlaylistPayload{}
	v.AccountID = &accountID
	v.PlaylistID = &playlistID
	v.Auth = auth

	return v
}

// ValidateRegisterRequestBody runs the validations defined on
// RegisterRequestBody
func ValidateRegisterRequestBody(body *RegisterRequestBody) (err error) {
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Password == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("password", "body"))
	}
	if body.ConfirmedPassword == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("confirmedPassword", "body"))
	}
	if body.FirstName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("firstName", "body"))
	}
	if body.LastName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("lastName", "body"))
	}
	return
}
