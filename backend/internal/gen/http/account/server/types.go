// Code generated by goa v3.5.5, DO NOT EDIT.
//
// account HTTP server types
//
// Command:
// $ goa gen git.fhict.nl/I425652/jordan-portfolio-s6/backend/internal/design
// -o ./internal/

package server

import (
	account "git.fhict.nl/I425652/jordan-portfolio-s6/backend/internal/gen/account"
	goa "goa.design/goa/v3/pkg"
)

// RegisterRequestBody is the type of the "account" service "register" endpoint
// HTTP request body.
type RegisterRequestBody struct {
	// Email of the user
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// Password of the user
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
	// Confirmed password of the user
	ConfirmedPassword *string `form:"confirmedPassword,omitempty" json:"confirmedPassword,omitempty" xml:"confirmedPassword,omitempty"`
}

// LoginRequestBody is the type of the "account" service "login" endpoint HTTP
// request body.
type LoginRequestBody struct {
	// Email of the user
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// Password of the user
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// CreateUserPlaylistRequestBody is the type of the "account" service
// "createUserPlaylist" endpoint HTTP request body.
type CreateUserPlaylistRequestBody struct {
	// Playlist name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// RegisterResponseBody is the type of the "account" service "register"
// endpoint HTTP response body.
type RegisterResponseBody struct {
	// Operation completion status
	Message string `form:"message" json:"message" xml:"message"`
}

// LoginResponseBody is the type of the "account" service "login" endpoint HTTP
// response body.
type LoginResponseBody struct {
	// User's email
	Email string `form:"email" json:"email" xml:"email"`
	// JWT Token
	Token string `form:"token" json:"token" xml:"token"`
	// Refresh token
	RefreshToken string `form:"refresh_token" json:"refresh_token" xml:"refresh_token"`
	// User's role
	Role string `form:"role" json:"role" xml:"role"`
	// User's role
	AccountID *string `form:"accountID,omitempty" json:"accountID,omitempty" xml:"accountID,omitempty"`
}

// GetUserPlaylistsResponseBody is the type of the "account" service
// "getUserPlaylists" endpoint HTTP response body.
type GetUserPlaylistsResponseBody struct {
	// Number of resources
	Total int32 `form:"total" json:"total" xml:"total"`
	// Operation completion status
	Resources []*UserSinglePlaylistResponseResponseBody `form:"resources" json:"resources" xml:"resources"`
}

// CreateUserPlaylistResponseBody is the type of the "account" service
// "createUserPlaylist" endpoint HTTP response body.
type CreateUserPlaylistResponseBody struct {
	// Operation completion status
	Message string `form:"message" json:"message" xml:"message"`
}

// DeleteUserPlaylistResponseBody is the type of the "account" service
// "deleteUserPlaylist" endpoint HTTP response body.
type DeleteUserPlaylistResponseBody struct {
	// Operation completion status
	Message string `form:"message" json:"message" xml:"message"`
}

// UserSinglePlaylistResponseResponseBody is used to define fields on response
// body types.
type UserSinglePlaylistResponseResponseBody struct {
	// Playlist id
	ID int32 `form:"id" json:"id" xml:"id"`
	// Playlist name
	Name string `form:"name" json:"name" xml:"name"`
	// Operation completion status
	Tracks []string `form:"tracks" json:"tracks" xml:"tracks"`
}

// NewRegisterResponseBody builds the HTTP response body from the result of the
// "register" endpoint of the "account" service.
func NewRegisterResponseBody(res *account.RegisterResponse) *RegisterResponseBody {
	body := &RegisterResponseBody{
		Message: res.Message,
	}
	return body
}

// NewLoginResponseBody builds the HTTP response body from the result of the
// "login" endpoint of the "account" service.
func NewLoginResponseBody(res *account.LoginResponse) *LoginResponseBody {
	body := &LoginResponseBody{
		Email:        res.Email,
		Token:        res.Token,
		RefreshToken: res.RefreshToken,
		Role:         res.Role,
		AccountID:    res.AccountID,
	}
	return body
}

// NewGetUserPlaylistsResponseBody builds the HTTP response body from the
// result of the "getUserPlaylists" endpoint of the "account" service.
func NewGetUserPlaylistsResponseBody(res *account.UserPlaylistsResponse) *GetUserPlaylistsResponseBody {
	body := &GetUserPlaylistsResponseBody{
		Total: res.Total,
	}
	if res.Resources != nil {
		body.Resources = make([]*UserSinglePlaylistResponseResponseBody, len(res.Resources))
		for i, val := range res.Resources {
			body.Resources[i] = marshalAccountUserSinglePlaylistResponseToUserSinglePlaylistResponseResponseBody(val)
		}
	}
	return body
}

// NewCreateUserPlaylistResponseBody builds the HTTP response body from the
// result of the "createUserPlaylist" endpoint of the "account" service.
func NewCreateUserPlaylistResponseBody(res *account.CreatePlaylistResponse) *CreateUserPlaylistResponseBody {
	body := &CreateUserPlaylistResponseBody{
		Message: res.Message,
	}
	return body
}

// NewDeleteUserPlaylistResponseBody builds the HTTP response body from the
// result of the "deleteUserPlaylist" endpoint of the "account" service.
func NewDeleteUserPlaylistResponseBody(res *account.DeletePlaylistResponse) *DeleteUserPlaylistResponseBody {
	body := &DeleteUserPlaylistResponseBody{
		Message: res.Message,
	}
	return body
}

// NewRegisterPayload builds a account service register endpoint payload.
func NewRegisterPayload(body *RegisterRequestBody) *account.RegisterPayload {
	v := &account.RegisterPayload{
		Email:             *body.Email,
		Password:          *body.Password,
		ConfirmedPassword: *body.ConfirmedPassword,
	}

	return v
}

// NewLoginPayload builds a account service login endpoint payload.
func NewLoginPayload(body *LoginRequestBody) *account.LoginPayload {
	v := &account.LoginPayload{
		Email:    body.Email,
		Password: body.Password,
	}

	return v
}

// NewGetUserPlaylistsPayload builds a account service getUserPlaylists
// endpoint payload.
func NewGetUserPlaylistsPayload(accountID uint, auth *string) *account.GetUserPlaylistsPayload {
	v := &account.GetUserPlaylistsPayload{}
	v.AccountID = &accountID
	v.Auth = auth

	return v
}

// NewCreateUserPlaylistPayload builds a account service createUserPlaylist
// endpoint payload.
func NewCreateUserPlaylistPayload(body *CreateUserPlaylistRequestBody, accountID uint, auth *string) *account.CreateUserPlaylistPayload {
	v := &account.CreateUserPlaylistPayload{
		Name: body.Name,
	}
	v.AccountID = &accountID
	v.Auth = auth

	return v
}

// NewDeleteUserPlaylistPayload builds a account service deleteUserPlaylist
// endpoint payload.
func NewDeleteUserPlaylistPayload(accountID uint, playlistID uint, auth *string) *account.DeleteUserPlaylistPayload {
	v := &account.DeleteUserPlaylistPayload{}
	v.AccountID = &accountID
	v.PlaylistID = &playlistID
	v.Auth = auth

	return v
}

// ValidateRegisterRequestBody runs the validations defined on
// RegisterRequestBody
func ValidateRegisterRequestBody(body *RegisterRequestBody) (err error) {
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Password == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("password", "body"))
	}
	if body.ConfirmedPassword == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("confirmedPassword", "body"))
	}
	return
}
