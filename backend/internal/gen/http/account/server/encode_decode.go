// Code generated by goa v3.5.5, DO NOT EDIT.
//
// account HTTP server encoders and decoders
//
// Command:
// $ goa gen git.fhict.nl/I425652/jordan-portfolio-s6/backend/internal/design
// -o ./internal/

package server

import (
	"context"
	"io"
	"net/http"
	"strconv"

	account "git.fhict.nl/I425652/jordan-portfolio-s6/backend/internal/gen/account"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeRegisterResponse returns an encoder for responses returned by the
// account register endpoint.
func EncodeRegisterResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*account.RegisterResponse)
		enc := encoder(ctx, w)
		body := NewRegisterResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeRegisterRequest returns a decoder for requests sent to the account
// register endpoint.
func DecodeRegisterRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body RegisterRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateRegisterRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewRegisterPayload(&body)

		return payload, nil
	}
}

// EncodeLoginResponse returns an encoder for responses returned by the account
// login endpoint.
func EncodeLoginResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*account.LoginResponse)
		enc := encoder(ctx, w)
		body := NewLoginResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeLoginRequest returns a decoder for requests sent to the account login
// endpoint.
func DecodeLoginRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body LoginRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		payload := NewLoginPayload(&body)

		return payload, nil
	}
}

// EncodeGetUserPlaylistsResponse returns an encoder for responses returned by
// the account getUserPlaylists endpoint.
func EncodeGetUserPlaylistsResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*account.UserPlaylistsResponse)
		enc := encoder(ctx, w)
		body := NewGetUserPlaylistsResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetUserPlaylistsRequest returns a decoder for requests sent to the
// account getUserPlaylists endpoint.
func DecodeGetUserPlaylistsRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			accountID uint
			auth      *string
			err       error

			params = mux.Vars(r)
		)
		{
			accountIDRaw := params["accountID"]
			v, err2 := strconv.ParseUint(accountIDRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("accountID", accountIDRaw, "unsigned integer"))
			}
			accountID = uint(v)
		}
		authRaw := r.Header.Get("Authorization")
		if authRaw != "" {
			auth = &authRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetUserPlaylistsPayload(accountID, auth)

		return payload, nil
	}
}

// EncodeCreateUserPlaylistResponse returns an encoder for responses returned
// by the account createUserPlaylist endpoint.
func EncodeCreateUserPlaylistResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*account.CreatePlaylistResponse)
		enc := encoder(ctx, w)
		body := NewCreateUserPlaylistResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeCreateUserPlaylistRequest returns a decoder for requests sent to the
// account createUserPlaylist endpoint.
func DecodeCreateUserPlaylistRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body CreateUserPlaylistRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}

		var (
			accountID uint
			auth      *string

			params = mux.Vars(r)
		)
		{
			accountIDRaw := params["accountID"]
			v, err2 := strconv.ParseUint(accountIDRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("accountID", accountIDRaw, "unsigned integer"))
			}
			accountID = uint(v)
		}
		authRaw := r.Header.Get("Authorization")
		if authRaw != "" {
			auth = &authRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewCreateUserPlaylistPayload(&body, accountID, auth)

		return payload, nil
	}
}

// EncodeDeleteUserPlaylistResponse returns an encoder for responses returned
// by the account deleteUserPlaylist endpoint.
func EncodeDeleteUserPlaylistResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*account.DeletePlaylistResponse)
		enc := encoder(ctx, w)
		body := NewDeleteUserPlaylistResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeDeleteUserPlaylistRequest returns a decoder for requests sent to the
// account deleteUserPlaylist endpoint.
func DecodeDeleteUserPlaylistRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			accountID  uint
			playlistID uint
			auth       *string
			err        error

			params = mux.Vars(r)
		)
		{
			accountIDRaw := params["accountID"]
			v, err2 := strconv.ParseUint(accountIDRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("accountID", accountIDRaw, "unsigned integer"))
			}
			accountID = uint(v)
		}
		{
			playlistIDRaw := params["playlistID"]
			v, err2 := strconv.ParseUint(playlistIDRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("playlistID", playlistIDRaw, "unsigned integer"))
			}
			playlistID = uint(v)
		}
		authRaw := r.Header.Get("Authorization")
		if authRaw != "" {
			auth = &authRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewDeleteUserPlaylistPayload(accountID, playlistID, auth)

		return payload, nil
	}
}

// marshalAccountUserSinglePlaylistResponseToUserSinglePlaylistResponseResponseBody
// builds a value of type *UserSinglePlaylistResponseResponseBody from a value
// of type *account.UserSinglePlaylistResponse.
func marshalAccountUserSinglePlaylistResponseToUserSinglePlaylistResponseResponseBody(v *account.UserSinglePlaylistResponse) *UserSinglePlaylistResponseResponseBody {
	res := &UserSinglePlaylistResponseResponseBody{
		ID:   v.ID,
		Name: v.Name,
	}
	if v.Tracks != nil {
		res.Tracks = make([]string, len(v.Tracks))
		for i, val := range v.Tracks {
			res.Tracks[i] = val
		}
	}

	return res
}
