// Code generated by goa v3.5.5, DO NOT EDIT.
//
// account HTTP server
//
// Command:
// $ goa gen github.com/JordanRad/play-j/backend/internal/design -o ./internal/

package server

import (
	"context"
	"net/http"

	account "github.com/JordanRad/play-j/backend/internal/gen/account"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the account service endpoint HTTP handlers.
type Server struct {
	Mounts                       []*MountPoint
	Register                     http.Handler
	Login                        http.Handler
	GetAccountPlaylistCollection http.Handler
	CreateAccountPlaylist        http.Handler
	DeleteAccountPlaylist        http.Handler
	GetAccountPlaylist           http.Handler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the design.
type ErrorNamer interface {
	ErrorName() string
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the account service endpoints using
// the provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *account.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"Register", "POST", "/api/v1/account/register"},
			{"Login", "POST", "/api/v1/account/login"},
			{"GetAccountPlaylistCollection", "GET", "/api/v1/account/{accountID}/playlists"},
			{"CreateAccountPlaylist", "POST", "/api/v1/account/{accountID}/playlists"},
			{"DeleteAccountPlaylist", "DELETE", "/api/v1/account/{accountID}/playlists/{playlistID}"},
			{"GetAccountPlaylist", "GET", "/api/v1/account/{accountID}/playlists/{playlistID}"},
		},
		Register:                     NewRegisterHandler(e.Register, mux, decoder, encoder, errhandler, formatter),
		Login:                        NewLoginHandler(e.Login, mux, decoder, encoder, errhandler, formatter),
		GetAccountPlaylistCollection: NewGetAccountPlaylistCollectionHandler(e.GetAccountPlaylistCollection, mux, decoder, encoder, errhandler, formatter),
		CreateAccountPlaylist:        NewCreateAccountPlaylistHandler(e.CreateAccountPlaylist, mux, decoder, encoder, errhandler, formatter),
		DeleteAccountPlaylist:        NewDeleteAccountPlaylistHandler(e.DeleteAccountPlaylist, mux, decoder, encoder, errhandler, formatter),
		GetAccountPlaylist:           NewGetAccountPlaylistHandler(e.GetAccountPlaylist, mux, decoder, encoder, errhandler, formatter),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "account" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.Register = m(s.Register)
	s.Login = m(s.Login)
	s.GetAccountPlaylistCollection = m(s.GetAccountPlaylistCollection)
	s.CreateAccountPlaylist = m(s.CreateAccountPlaylist)
	s.DeleteAccountPlaylist = m(s.DeleteAccountPlaylist)
	s.GetAccountPlaylist = m(s.GetAccountPlaylist)
}

// Mount configures the mux to serve the account endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountRegisterHandler(mux, h.Register)
	MountLoginHandler(mux, h.Login)
	MountGetAccountPlaylistCollectionHandler(mux, h.GetAccountPlaylistCollection)
	MountCreateAccountPlaylistHandler(mux, h.CreateAccountPlaylist)
	MountDeleteAccountPlaylistHandler(mux, h.DeleteAccountPlaylist)
	MountGetAccountPlaylistHandler(mux, h.GetAccountPlaylist)
}

// Mount configures the mux to serve the account endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountRegisterHandler configures the mux to serve the "account" service
// "register" endpoint.
func MountRegisterHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/api/v1/account/register", f)
}

// NewRegisterHandler creates a HTTP handler which loads the HTTP request and
// calls the "account" service "register" endpoint.
func NewRegisterHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeRegisterRequest(mux, decoder)
		encodeResponse = EncodeRegisterResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "register")
		ctx = context.WithValue(ctx, goa.ServiceKey, "account")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountLoginHandler configures the mux to serve the "account" service "login"
// endpoint.
func MountLoginHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/api/v1/account/login", f)
}

// NewLoginHandler creates a HTTP handler which loads the HTTP request and
// calls the "account" service "login" endpoint.
func NewLoginHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeLoginRequest(mux, decoder)
		encodeResponse = EncodeLoginResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "login")
		ctx = context.WithValue(ctx, goa.ServiceKey, "account")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetAccountPlaylistCollectionHandler configures the mux to serve the
// "account" service "getAccountPlaylistCollection" endpoint.
func MountGetAccountPlaylistCollectionHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/api/v1/account/{accountID}/playlists", f)
}

// NewGetAccountPlaylistCollectionHandler creates a HTTP handler which loads
// the HTTP request and calls the "account" service
// "getAccountPlaylistCollection" endpoint.
func NewGetAccountPlaylistCollectionHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetAccountPlaylistCollectionRequest(mux, decoder)
		encodeResponse = EncodeGetAccountPlaylistCollectionResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "getAccountPlaylistCollection")
		ctx = context.WithValue(ctx, goa.ServiceKey, "account")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCreateAccountPlaylistHandler configures the mux to serve the "account"
// service "createAccountPlaylist" endpoint.
func MountCreateAccountPlaylistHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/api/v1/account/{accountID}/playlists", f)
}

// NewCreateAccountPlaylistHandler creates a HTTP handler which loads the HTTP
// request and calls the "account" service "createAccountPlaylist" endpoint.
func NewCreateAccountPlaylistHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreateAccountPlaylistRequest(mux, decoder)
		encodeResponse = EncodeCreateAccountPlaylistResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "createAccountPlaylist")
		ctx = context.WithValue(ctx, goa.ServiceKey, "account")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeleteAccountPlaylistHandler configures the mux to serve the "account"
// service "deleteAccountPlaylist" endpoint.
func MountDeleteAccountPlaylistHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/api/v1/account/{accountID}/playlists/{playlistID}", f)
}

// NewDeleteAccountPlaylistHandler creates a HTTP handler which loads the HTTP
// request and calls the "account" service "deleteAccountPlaylist" endpoint.
func NewDeleteAccountPlaylistHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteAccountPlaylistRequest(mux, decoder)
		encodeResponse = EncodeDeleteAccountPlaylistResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "deleteAccountPlaylist")
		ctx = context.WithValue(ctx, goa.ServiceKey, "account")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetAccountPlaylistHandler configures the mux to serve the "account"
// service "getAccountPlaylist" endpoint.
func MountGetAccountPlaylistHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/api/v1/account/{accountID}/playlists/{playlistID}", f)
}

// NewGetAccountPlaylistHandler creates a HTTP handler which loads the HTTP
// request and calls the "account" service "getAccountPlaylist" endpoint.
func NewGetAccountPlaylistHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetAccountPlaylistRequest(mux, decoder)
		encodeResponse = EncodeGetAccountPlaylistResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "getAccountPlaylist")
		ctx = context.WithValue(ctx, goa.ServiceKey, "account")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}
