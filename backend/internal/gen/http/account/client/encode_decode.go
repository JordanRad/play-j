// Code generated by goa v3.5.5, DO NOT EDIT.
//
// account HTTP client encoders and decoders
//
// Command:
// $ goa gen git.fhict.nl/I425652/jordan-portfolio-s6/backend/internal/design
// -o ./internal/

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	account "git.fhict.nl/I425652/jordan-portfolio-s6/backend/internal/gen/account"
	goahttp "goa.design/goa/v3/http"
)

// BuildRegisterRequest instantiates a HTTP request object with method and path
// set to call the "account" service "register" endpoint
func (c *Client) BuildRegisterRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RegisterAccountPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("account", "register", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeRegisterRequest returns an encoder for requests sent to the account
// register server.
func EncodeRegisterRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*account.RegisterPayload)
		if !ok {
			return goahttp.ErrInvalidType("account", "register", "*account.RegisterPayload", v)
		}
		body := NewRegisterRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("account", "register", err)
		}
		return nil
	}
}

// DecodeRegisterResponse returns a decoder for responses returned by the
// account register endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeRegisterResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body RegisterResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("account", "register", err)
			}
			err = ValidateRegisterResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("account", "register", err)
			}
			res := NewRegisterResponseOK(&body)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("account", "register", resp.StatusCode, string(body))
		}
	}
}

// BuildLoginRequest instantiates a HTTP request object with method and path
// set to call the "account" service "login" endpoint
func (c *Client) BuildLoginRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: LoginAccountPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("account", "login", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeLoginRequest returns an encoder for requests sent to the account login
// server.
func EncodeLoginRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*account.LoginPayload)
		if !ok {
			return goahttp.ErrInvalidType("account", "login", "*account.LoginPayload", v)
		}
		body := NewLoginRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("account", "login", err)
		}
		return nil
	}
}

// DecodeLoginResponse returns a decoder for responses returned by the account
// login endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeLoginResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body LoginResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("account", "login", err)
			}
			err = ValidateLoginResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("account", "login", err)
			}
			res := NewLoginResponseOK(&body)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("account", "login", resp.StatusCode, string(body))
		}
	}
}

// BuildGetAccountPlaylistCollectionRequest instantiates a HTTP request object
// with method and path set to call the "account" service
// "getAccountPlaylistCollection" endpoint
func (c *Client) BuildGetAccountPlaylistCollectionRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		accountID uint
	)
	{
		p, ok := v.(*account.GetAccountPlaylistCollectionPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("account", "getAccountPlaylistCollection", "*account.GetAccountPlaylistCollectionPayload", v)
		}
		if p.AccountID != nil {
			accountID = *p.AccountID
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetAccountPlaylistCollectionAccountPath(accountID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("account", "getAccountPlaylistCollection", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetAccountPlaylistCollectionRequest returns an encoder for requests
// sent to the account getAccountPlaylistCollection server.
func EncodeGetAccountPlaylistCollectionRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*account.GetAccountPlaylistCollectionPayload)
		if !ok {
			return goahttp.ErrInvalidType("account", "getAccountPlaylistCollection", "*account.GetAccountPlaylistCollectionPayload", v)
		}
		if p.Auth != nil {
			head := *p.Auth
			req.Header.Set("Authorization", head)
		}
		return nil
	}
}

// DecodeGetAccountPlaylistCollectionResponse returns a decoder for responses
// returned by the account getAccountPlaylistCollection endpoint. restoreBody
// controls whether the response body should be restored after having been read.
func DecodeGetAccountPlaylistCollectionResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetAccountPlaylistCollectionResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("account", "getAccountPlaylistCollection", err)
			}
			err = ValidateGetAccountPlaylistCollectionResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("account", "getAccountPlaylistCollection", err)
			}
			res := NewGetAccountPlaylistCollectionAccountPlaylistCollectionResponseOK(&body)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("account", "getAccountPlaylistCollection", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateAccountPlaylistRequest instantiates a HTTP request object with
// method and path set to call the "account" service "createAccountPlaylist"
// endpoint
func (c *Client) BuildCreateAccountPlaylistRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		accountID uint
	)
	{
		p, ok := v.(*account.CreateAccountPlaylistPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("account", "createAccountPlaylist", "*account.CreateAccountPlaylistPayload", v)
		}
		if p.AccountID != nil {
			accountID = *p.AccountID
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateAccountPlaylistAccountPath(accountID)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("account", "createAccountPlaylist", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateAccountPlaylistRequest returns an encoder for requests sent to
// the account createAccountPlaylist server.
func EncodeCreateAccountPlaylistRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*account.CreateAccountPlaylistPayload)
		if !ok {
			return goahttp.ErrInvalidType("account", "createAccountPlaylist", "*account.CreateAccountPlaylistPayload", v)
		}
		if p.Auth != nil {
			head := *p.Auth
			req.Header.Set("Authorization", head)
		}
		body := NewCreateAccountPlaylistRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("account", "createAccountPlaylist", err)
		}
		return nil
	}
}

// DecodeCreateAccountPlaylistResponse returns a decoder for responses returned
// by the account createAccountPlaylist endpoint. restoreBody controls whether
// the response body should be restored after having been read.
func DecodeCreateAccountPlaylistResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body CreateAccountPlaylistResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("account", "createAccountPlaylist", err)
			}
			err = ValidateCreateAccountPlaylistResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("account", "createAccountPlaylist", err)
			}
			res := NewCreateAccountPlaylistCreatePlaylistResponseOK(&body)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("account", "createAccountPlaylist", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteAccountPlaylistRequest instantiates a HTTP request object with
// method and path set to call the "account" service "deleteAccountPlaylist"
// endpoint
func (c *Client) BuildDeleteAccountPlaylistRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		accountID  uint
		playlistID uint
	)
	{
		p, ok := v.(*account.DeleteAccountPlaylistPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("account", "deleteAccountPlaylist", "*account.DeleteAccountPlaylistPayload", v)
		}
		if p.AccountID != nil {
			accountID = *p.AccountID
		}
		if p.PlaylistID != nil {
			playlistID = *p.PlaylistID
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteAccountPlaylistAccountPath(accountID, playlistID)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("account", "deleteAccountPlaylist", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteAccountPlaylistRequest returns an encoder for requests sent to
// the account deleteAccountPlaylist server.
func EncodeDeleteAccountPlaylistRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*account.DeleteAccountPlaylistPayload)
		if !ok {
			return goahttp.ErrInvalidType("account", "deleteAccountPlaylist", "*account.DeleteAccountPlaylistPayload", v)
		}
		if p.Auth != nil {
			head := *p.Auth
			req.Header.Set("Authorization", head)
		}
		return nil
	}
}

// DecodeDeleteAccountPlaylistResponse returns a decoder for responses returned
// by the account deleteAccountPlaylist endpoint. restoreBody controls whether
// the response body should be restored after having been read.
func DecodeDeleteAccountPlaylistResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body DeleteAccountPlaylistResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("account", "deleteAccountPlaylist", err)
			}
			err = ValidateDeleteAccountPlaylistResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("account", "deleteAccountPlaylist", err)
			}
			res := NewDeleteAccountPlaylistDeletePlaylistResponseOK(&body)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("account", "deleteAccountPlaylist", resp.StatusCode, string(body))
		}
	}
}

// BuildGetAccountPlaylistRequest instantiates a HTTP request object with
// method and path set to call the "account" service "getAccountPlaylist"
// endpoint
func (c *Client) BuildGetAccountPlaylistRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		accountID  uint
		playlistID uint
	)
	{
		p, ok := v.(*account.GetAccountPlaylistPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("account", "getAccountPlaylist", "*account.GetAccountPlaylistPayload", v)
		}
		if p.AccountID != nil {
			accountID = *p.AccountID
		}
		if p.PlaylistID != nil {
			playlistID = *p.PlaylistID
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetAccountPlaylistAccountPath(accountID, playlistID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("account", "getAccountPlaylist", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetAccountPlaylistRequest returns an encoder for requests sent to the
// account getAccountPlaylist server.
func EncodeGetAccountPlaylistRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*account.GetAccountPlaylistPayload)
		if !ok {
			return goahttp.ErrInvalidType("account", "getAccountPlaylist", "*account.GetAccountPlaylistPayload", v)
		}
		if p.Auth != nil {
			head := *p.Auth
			req.Header.Set("Authorization", head)
		}
		return nil
	}
}

// DecodeGetAccountPlaylistResponse returns a decoder for responses returned by
// the account getAccountPlaylist endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodeGetAccountPlaylistResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetAccountPlaylistResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("account", "getAccountPlaylist", err)
			}
			err = ValidateGetAccountPlaylistResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("account", "getAccountPlaylist", err)
			}
			res := NewGetAccountPlaylistAccountPlaylistResponseOK(&body)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("account", "getAccountPlaylist", resp.StatusCode, string(body))
		}
	}
}

// unmarshalAccountPlaylistResponseResponseBodyToAccountAccountPlaylistResponse
// builds a value of type *account.AccountPlaylistResponse from a value of type
// *AccountPlaylistResponseResponseBody.
func unmarshalAccountPlaylistResponseResponseBodyToAccountAccountPlaylistResponse(v *AccountPlaylistResponseResponseBody) *account.AccountPlaylistResponse {
	res := &account.AccountPlaylistResponse{
		ID:   *v.ID,
		Name: *v.Name,
	}
	res.TrackIDs = make([]int32, len(v.TrackIDs))
	for i, val := range v.TrackIDs {
		res.TrackIDs[i] = val
	}

	return res
}
