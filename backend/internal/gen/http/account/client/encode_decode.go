// Code generated by goa v3.5.5, DO NOT EDIT.
//
// account HTTP client encoders and decoders
//
// Command:
// $ goa gen git.fhict.nl/I425652/jordan-portfolio-s6/backend/internal/design
// -o ./internal/

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	account "git.fhict.nl/I425652/jordan-portfolio-s6/backend/internal/gen/account"
	goahttp "goa.design/goa/v3/http"
)

// BuildRegisterRequest instantiates a HTTP request object with method and path
// set to call the "account" service "register" endpoint
func (c *Client) BuildRegisterRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RegisterAccountPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("account", "register", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeRegisterRequest returns an encoder for requests sent to the account
// register server.
func EncodeRegisterRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*account.RegisterPayload)
		if !ok {
			return goahttp.ErrInvalidType("account", "register", "*account.RegisterPayload", v)
		}
		body := NewRegisterRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("account", "register", err)
		}
		return nil
	}
}

// DecodeRegisterResponse returns a decoder for responses returned by the
// account register endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeRegisterResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body RegisterResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("account", "register", err)
			}
			err = ValidateRegisterResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("account", "register", err)
			}
			res := NewRegisterResponseOK(&body)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("account", "register", resp.StatusCode, string(body))
		}
	}
}

// BuildLoginRequest instantiates a HTTP request object with method and path
// set to call the "account" service "login" endpoint
func (c *Client) BuildLoginRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: LoginAccountPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("account", "login", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeLoginRequest returns an encoder for requests sent to the account login
// server.
func EncodeLoginRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*account.LoginPayload)
		if !ok {
			return goahttp.ErrInvalidType("account", "login", "*account.LoginPayload", v)
		}
		body := NewLoginRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("account", "login", err)
		}
		return nil
	}
}

// DecodeLoginResponse returns a decoder for responses returned by the account
// login endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeLoginResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body LoginResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("account", "login", err)
			}
			err = ValidateLoginResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("account", "login", err)
			}
			res := NewLoginResponseOK(&body)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("account", "login", resp.StatusCode, string(body))
		}
	}
}

// BuildGetUserPlaylistsRequest instantiates a HTTP request object with method
// and path set to call the "account" service "getUserPlaylists" endpoint
func (c *Client) BuildGetUserPlaylistsRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		accountID uint
	)
	{
		p, ok := v.(*account.GetUserPlaylistsPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("account", "getUserPlaylists", "*account.GetUserPlaylistsPayload", v)
		}
		if p.AccountID != nil {
			accountID = *p.AccountID
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetUserPlaylistsAccountPath(accountID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("account", "getUserPlaylists", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetUserPlaylistsRequest returns an encoder for requests sent to the
// account getUserPlaylists server.
func EncodeGetUserPlaylistsRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*account.GetUserPlaylistsPayload)
		if !ok {
			return goahttp.ErrInvalidType("account", "getUserPlaylists", "*account.GetUserPlaylistsPayload", v)
		}
		if p.Auth != nil {
			head := *p.Auth
			req.Header.Set("Authorization", head)
		}
		return nil
	}
}

// DecodeGetUserPlaylistsResponse returns a decoder for responses returned by
// the account getUserPlaylists endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodeGetUserPlaylistsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetUserPlaylistsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("account", "getUserPlaylists", err)
			}
			err = ValidateGetUserPlaylistsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("account", "getUserPlaylists", err)
			}
			res := NewGetUserPlaylistsUserPlaylistsResponseOK(&body)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("account", "getUserPlaylists", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateUserPlaylistRequest instantiates a HTTP request object with
// method and path set to call the "account" service "createUserPlaylist"
// endpoint
func (c *Client) BuildCreateUserPlaylistRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		accountID uint
	)
	{
		p, ok := v.(*account.CreateUserPlaylistPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("account", "createUserPlaylist", "*account.CreateUserPlaylistPayload", v)
		}
		if p.AccountID != nil {
			accountID = *p.AccountID
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateUserPlaylistAccountPath(accountID)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("account", "createUserPlaylist", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateUserPlaylistRequest returns an encoder for requests sent to the
// account createUserPlaylist server.
func EncodeCreateUserPlaylistRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*account.CreateUserPlaylistPayload)
		if !ok {
			return goahttp.ErrInvalidType("account", "createUserPlaylist", "*account.CreateUserPlaylistPayload", v)
		}
		if p.Auth != nil {
			head := *p.Auth
			req.Header.Set("Authorization", head)
		}
		body := NewCreateUserPlaylistRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("account", "createUserPlaylist", err)
		}
		return nil
	}
}

// DecodeCreateUserPlaylistResponse returns a decoder for responses returned by
// the account createUserPlaylist endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodeCreateUserPlaylistResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body CreateUserPlaylistResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("account", "createUserPlaylist", err)
			}
			err = ValidateCreateUserPlaylistResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("account", "createUserPlaylist", err)
			}
			res := NewCreateUserPlaylistCreatePlaylistResponseOK(&body)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("account", "createUserPlaylist", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteUserPlaylistRequest instantiates a HTTP request object with
// method and path set to call the "account" service "deleteUserPlaylist"
// endpoint
func (c *Client) BuildDeleteUserPlaylistRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		accountID  uint
		playlistID uint
	)
	{
		p, ok := v.(*account.DeleteUserPlaylistPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("account", "deleteUserPlaylist", "*account.DeleteUserPlaylistPayload", v)
		}
		if p.AccountID != nil {
			accountID = *p.AccountID
		}
		if p.PlaylistID != nil {
			playlistID = *p.PlaylistID
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteUserPlaylistAccountPath(accountID, playlistID)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("account", "deleteUserPlaylist", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteUserPlaylistRequest returns an encoder for requests sent to the
// account deleteUserPlaylist server.
func EncodeDeleteUserPlaylistRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*account.DeleteUserPlaylistPayload)
		if !ok {
			return goahttp.ErrInvalidType("account", "deleteUserPlaylist", "*account.DeleteUserPlaylistPayload", v)
		}
		if p.Auth != nil {
			head := *p.Auth
			req.Header.Set("Authorization", head)
		}
		return nil
	}
}

// DecodeDeleteUserPlaylistResponse returns a decoder for responses returned by
// the account deleteUserPlaylist endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodeDeleteUserPlaylistResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body DeleteUserPlaylistResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("account", "deleteUserPlaylist", err)
			}
			err = ValidateDeleteUserPlaylistResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("account", "deleteUserPlaylist", err)
			}
			res := NewDeleteUserPlaylistDeletePlaylistResponseOK(&body)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("account", "deleteUserPlaylist", resp.StatusCode, string(body))
		}
	}
}

// unmarshalUserSinglePlaylistResponseResponseBodyToAccountUserSinglePlaylistResponse
// builds a value of type *account.UserSinglePlaylistResponse from a value of
// type *UserSinglePlaylistResponseResponseBody.
func unmarshalUserSinglePlaylistResponseResponseBodyToAccountUserSinglePlaylistResponse(v *UserSinglePlaylistResponseResponseBody) *account.UserSinglePlaylistResponse {
	res := &account.UserSinglePlaylistResponse{
		ID:   *v.ID,
		Name: *v.Name,
	}
	res.Tracks = make([]string, len(v.Tracks))
	for i, val := range v.Tracks {
		res.Tracks[i] = val
	}

	return res
}
