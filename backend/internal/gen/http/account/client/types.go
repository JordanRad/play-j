// Code generated by goa v3.5.5, DO NOT EDIT.
//
// account HTTP client types
//
// Command:
// $ goa gen git.fhict.nl/I425652/jordan-portfolio-s6/backend/internal/design
// -o ./internal/

package client

import (
	account "git.fhict.nl/I425652/jordan-portfolio-s6/backend/internal/gen/account"
	goa "goa.design/goa/v3/pkg"
)

// RegisterRequestBody is the type of the "account" service "register" endpoint
// HTTP request body.
type RegisterRequestBody struct {
	// Email of the user
	Email string `form:"email" json:"email" xml:"email"`
	// Password of the user
	Password string `form:"password" json:"password" xml:"password"`
	// Confirmed password of the user
	ConfirmedPassword string `form:"confirmedPassword" json:"confirmedPassword" xml:"confirmedPassword"`
}

// LoginRequestBody is the type of the "account" service "login" endpoint HTTP
// request body.
type LoginRequestBody struct {
	// Email of the user
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// Password of the user
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// RegisterResponseBody is the type of the "account" service "register"
// endpoint HTTP response body.
type RegisterResponseBody struct {
	// Operation completion status
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// LoginResponseBody is the type of the "account" service "login" endpoint HTTP
// response body.
type LoginResponseBody struct {
	// User's email
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// JWT Token
	Token *string `form:"token,omitempty" json:"token,omitempty" xml:"token,omitempty"`
	// Refresh token
	RefreshToken *string `form:"refresh_token,omitempty" json:"refresh_token,omitempty" xml:"refresh_token,omitempty"`
	// User's role
	Role *string `form:"role,omitempty" json:"role,omitempty" xml:"role,omitempty"`
	// User's role
	AccountID *string `form:"accountID,omitempty" json:"accountID,omitempty" xml:"accountID,omitempty"`
}

// GetUserPlaylistsResponseBody is the type of the "account" service
// "getUserPlaylists" endpoint HTTP response body.
type GetUserPlaylistsResponseBody struct {
	// Number of resources
	Total *int32 `form:"total,omitempty" json:"total,omitempty" xml:"total,omitempty"`
	// Operation completion status
	Resources []*UserSinglePlaylistResponseResponseBody `form:"resources,omitempty" json:"resources,omitempty" xml:"resources,omitempty"`
}

// UserSinglePlaylistResponseResponseBody is used to define fields on response
// body types.
type UserSinglePlaylistResponseResponseBody struct {
	// Playlist id
	ID *int32 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Playlist name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Operation completion status
	Tracks []string `form:"tracks,omitempty" json:"tracks,omitempty" xml:"tracks,omitempty"`
}

// NewRegisterRequestBody builds the HTTP request body from the payload of the
// "register" endpoint of the "account" service.
func NewRegisterRequestBody(p *account.RegisterPayload) *RegisterRequestBody {
	body := &RegisterRequestBody{
		Email:             p.Email,
		Password:          p.Password,
		ConfirmedPassword: p.ConfirmedPassword,
	}
	return body
}

// NewLoginRequestBody builds the HTTP request body from the payload of the
// "login" endpoint of the "account" service.
func NewLoginRequestBody(p *account.LoginPayload) *LoginRequestBody {
	body := &LoginRequestBody{
		Email:    p.Email,
		Password: p.Password,
	}
	return body
}

// NewRegisterResponseOK builds a "account" service "register" endpoint result
// from a HTTP "OK" response.
func NewRegisterResponseOK(body *RegisterResponseBody) *account.RegisterResponse {
	v := &account.RegisterResponse{
		Message: *body.Message,
	}

	return v
}

// NewLoginResponseOK builds a "account" service "login" endpoint result from a
// HTTP "OK" response.
func NewLoginResponseOK(body *LoginResponseBody) *account.LoginResponse {
	v := &account.LoginResponse{
		Email:        *body.Email,
		Token:        *body.Token,
		RefreshToken: *body.RefreshToken,
		Role:         *body.Role,
		AccountID:    body.AccountID,
	}

	return v
}

// NewGetUserPlaylistsUserPlaylistsResponseOK builds a "account" service
// "getUserPlaylists" endpoint result from a HTTP "OK" response.
func NewGetUserPlaylistsUserPlaylistsResponseOK(body *GetUserPlaylistsResponseBody) *account.UserPlaylistsResponse {
	v := &account.UserPlaylistsResponse{
		Total: *body.Total,
	}
	v.Resources = make([]*account.UserSinglePlaylistResponse, len(body.Resources))
	for i, val := range body.Resources {
		v.Resources[i] = unmarshalUserSinglePlaylistResponseResponseBodyToAccountUserSinglePlaylistResponse(val)
	}

	return v
}

// ValidateRegisterResponseBody runs the validations defined on
// RegisterResponseBody
func ValidateRegisterResponseBody(body *RegisterResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateLoginResponseBody runs the validations defined on LoginResponseBody
func ValidateLoginResponseBody(body *LoginResponseBody) (err error) {
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Token == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("token", "body"))
	}
	if body.RefreshToken == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("refresh_token", "body"))
	}
	if body.Role == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("role", "body"))
	}
	return
}

// ValidateGetUserPlaylistsResponseBody runs the validations defined on
// GetUserPlaylistsResponseBody
func ValidateGetUserPlaylistsResponseBody(body *GetUserPlaylistsResponseBody) (err error) {
	if body.Total == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total", "body"))
	}
	if body.Resources == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("resources", "body"))
	}
	for _, e := range body.Resources {
		if e != nil {
			if err2 := ValidateUserSinglePlaylistResponseResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateUserSinglePlaylistResponseResponseBody runs the validations defined
// on UserSinglePlaylistResponseResponseBody
func ValidateUserSinglePlaylistResponseResponseBody(body *UserSinglePlaylistResponseResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Tracks == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("tracks", "body"))
	}
	return
}
