// Code generated by goa v3.5.5, DO NOT EDIT.
//
// account HTTP client CLI support package
//
// Command:
// $ goa gen github.com/JordanRad/play-j/backend/internal/design -o ./internal/

package client

import (
	"encoding/json"
	"fmt"
	"strconv"

	account "github.com/JordanRad/play-j/backend/internal/gen/account"
)

// BuildRegisterPayload builds the payload for the account register endpoint
// from CLI flags.
func BuildRegisterPayload(accountRegisterBody string) (*account.RegisterPayload, error) {
	var err error
	var body RegisterRequestBody
	{
		err = json.Unmarshal([]byte(accountRegisterBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"confirmedPassword\": \"Ipsum et molestiae.\",\n      \"email\": \"Et odit vel assumenda.\",\n      \"firstName\": \"Porro rerum distinctio minus facilis.\",\n      \"lastName\": \"Facere corrupti libero ut.\",\n      \"password\": \"Quibusdam omnis nemo provident eos quis ut.\"\n   }'")
		}
	}
	v := &account.RegisterPayload{
		FirstName:         body.FirstName,
		LastName:          body.LastName,
		Email:             body.Email,
		Password:          body.Password,
		ConfirmedPassword: body.ConfirmedPassword,
	}

	return v, nil
}

// BuildLoginPayload builds the payload for the account login endpoint from CLI
// flags.
func BuildLoginPayload(accountLoginBody string) (*account.LoginPayload, error) {
	var err error
	var body LoginRequestBody
	{
		err = json.Unmarshal([]byte(accountLoginBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"email\": \"Voluptates id recusandae temporibus et dolore.\",\n      \"password\": \"Numquam quos excepturi vero ad est.\"\n   }'")
		}
	}
	v := &account.LoginPayload{
		Email:    body.Email,
		Password: body.Password,
	}

	return v, nil
}

// BuildGetAccountPlaylistCollectionPayload builds the payload for the account
// getAccountPlaylistCollection endpoint from CLI flags.
func BuildGetAccountPlaylistCollectionPayload(accountGetAccountPlaylistCollectionAccountID string, accountGetAccountPlaylistCollectionAuth string) (*account.GetAccountPlaylistCollectionPayload, error) {
	var err error
	var accountID uint
	{
		var v uint64
		v, err = strconv.ParseUint(accountGetAccountPlaylistCollectionAccountID, 10, 64)
		accountID = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for accountID, must be UINT")
		}
	}
	var auth *string
	{
		if accountGetAccountPlaylistCollectionAuth != "" {
			auth = &accountGetAccountPlaylistCollectionAuth
		}
	}
	v := &account.GetAccountPlaylistCollectionPayload{}
	v.AccountID = &accountID
	v.Auth = auth

	return v, nil
}

// BuildCreateAccountPlaylistPayload builds the payload for the account
// createAccountPlaylist endpoint from CLI flags.
func BuildCreateAccountPlaylistPayload(accountCreateAccountPlaylistBody string, accountCreateAccountPlaylistAccountID string, accountCreateAccountPlaylistAuth string) (*account.CreateAccountPlaylistPayload, error) {
	var err error
	var body CreateAccountPlaylistRequestBody
	{
		err = json.Unmarshal([]byte(accountCreateAccountPlaylistBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"name\": \"Enim consectetur sit omnis expedita.\"\n   }'")
		}
	}
	var accountID uint
	{
		var v uint64
		v, err = strconv.ParseUint(accountCreateAccountPlaylistAccountID, 10, 64)
		accountID = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for accountID, must be UINT")
		}
	}
	var auth *string
	{
		if accountCreateAccountPlaylistAuth != "" {
			auth = &accountCreateAccountPlaylistAuth
		}
	}
	v := &account.CreateAccountPlaylistPayload{
		Name: body.Name,
	}
	v.AccountID = &accountID
	v.Auth = auth

	return v, nil
}

// BuildDeleteAccountPlaylistPayload builds the payload for the account
// deleteAccountPlaylist endpoint from CLI flags.
func BuildDeleteAccountPlaylistPayload(accountDeleteAccountPlaylistAccountID string, accountDeleteAccountPlaylistPlaylistID string, accountDeleteAccountPlaylistAuth string) (*account.DeleteAccountPlaylistPayload, error) {
	var err error
	var accountID uint
	{
		var v uint64
		v, err = strconv.ParseUint(accountDeleteAccountPlaylistAccountID, 10, 64)
		accountID = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for accountID, must be UINT")
		}
	}
	var playlistID uint
	{
		var v uint64
		v, err = strconv.ParseUint(accountDeleteAccountPlaylistPlaylistID, 10, 64)
		playlistID = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for playlistID, must be UINT")
		}
	}
	var auth *string
	{
		if accountDeleteAccountPlaylistAuth != "" {
			auth = &accountDeleteAccountPlaylistAuth
		}
	}
	v := &account.DeleteAccountPlaylistPayload{}
	v.AccountID = &accountID
	v.PlaylistID = &playlistID
	v.Auth = auth

	return v, nil
}

// BuildGetAccountPlaylistPayload builds the payload for the account
// getAccountPlaylist endpoint from CLI flags.
func BuildGetAccountPlaylistPayload(accountGetAccountPlaylistAccountID string, accountGetAccountPlaylistPlaylistID string, accountGetAccountPlaylistAuth string) (*account.GetAccountPlaylistPayload, error) {
	var err error
	var accountID uint
	{
		var v uint64
		v, err = strconv.ParseUint(accountGetAccountPlaylistAccountID, 10, 64)
		accountID = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for accountID, must be UINT")
		}
	}
	var playlistID uint
	{
		var v uint64
		v, err = strconv.ParseUint(accountGetAccountPlaylistPlaylistID, 10, 64)
		playlistID = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for playlistID, must be UINT")
		}
	}
	var auth *string
	{
		if accountGetAccountPlaylistAuth != "" {
			auth = &accountGetAccountPlaylistAuth
		}
	}
	v := &account.GetAccountPlaylistPayload{}
	v.AccountID = &accountID
	v.PlaylistID = &playlistID
	v.Auth = auth

	return v, nil
}
