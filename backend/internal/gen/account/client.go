// Code generated by goa v3.5.5, DO NOT EDIT.
//
// account client
//
// Command:
// $ goa gen github.com/JordanRad/play-j/backend/internal/design -o ./internal/

package account

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "account" service client.
type Client struct {
	RegisterEndpoint                     goa.Endpoint
	LoginEndpoint                        goa.Endpoint
	GetAccountPlaylistCollectionEndpoint goa.Endpoint
	CreateAccountPlaylistEndpoint        goa.Endpoint
	DeleteAccountPlaylistEndpoint        goa.Endpoint
	GetAccountPlaylistEndpoint           goa.Endpoint
}

// NewClient initializes a "account" service client given the endpoints.
func NewClient(register, login, getAccountPlaylistCollection, createAccountPlaylist, deleteAccountPlaylist, getAccountPlaylist goa.Endpoint) *Client {
	return &Client{
		RegisterEndpoint:                     register,
		LoginEndpoint:                        login,
		GetAccountPlaylistCollectionEndpoint: getAccountPlaylistCollection,
		CreateAccountPlaylistEndpoint:        createAccountPlaylist,
		DeleteAccountPlaylistEndpoint:        deleteAccountPlaylist,
		GetAccountPlaylistEndpoint:           getAccountPlaylist,
	}
}

// Register calls the "register" endpoint of the "account" service.
func (c *Client) Register(ctx context.Context, p *RegisterPayload) (res *RegisterResponse, err error) {
	var ires interface{}
	ires, err = c.RegisterEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*RegisterResponse), nil
}

// Login calls the "login" endpoint of the "account" service.
func (c *Client) Login(ctx context.Context, p *LoginPayload) (res *LoginResponse, err error) {
	var ires interface{}
	ires, err = c.LoginEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*LoginResponse), nil
}

// GetAccountPlaylistCollection calls the "getAccountPlaylistCollection"
// endpoint of the "account" service.
func (c *Client) GetAccountPlaylistCollection(ctx context.Context, p *GetAccountPlaylistCollectionPayload) (res *AccountPlaylistCollectionResponse, err error) {
	var ires interface{}
	ires, err = c.GetAccountPlaylistCollectionEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*AccountPlaylistCollectionResponse), nil
}

// CreateAccountPlaylist calls the "createAccountPlaylist" endpoint of the
// "account" service.
func (c *Client) CreateAccountPlaylist(ctx context.Context, p *CreateAccountPlaylistPayload) (res *CreatePlaylistResponse, err error) {
	var ires interface{}
	ires, err = c.CreateAccountPlaylistEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*CreatePlaylistResponse), nil
}

// DeleteAccountPlaylist calls the "deleteAccountPlaylist" endpoint of the
// "account" service.
func (c *Client) DeleteAccountPlaylist(ctx context.Context, p *DeleteAccountPlaylistPayload) (res *DeletePlaylistResponse, err error) {
	var ires interface{}
	ires, err = c.DeleteAccountPlaylistEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*DeletePlaylistResponse), nil
}

// GetAccountPlaylist calls the "getAccountPlaylist" endpoint of the "account"
// service.
func (c *Client) GetAccountPlaylist(ctx context.Context, p *GetAccountPlaylistPayload) (res *AccountPlaylistResponse, err error) {
	var ires interface{}
	ires, err = c.GetAccountPlaylistEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*AccountPlaylistResponse), nil
}
