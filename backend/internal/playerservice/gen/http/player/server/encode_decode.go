// Code generated by goa v3.7.0, DO NOT EDIT.
//
// player HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/JordanRad/play-j/backend/internal/design/player-service
// -o ./internal/playerservice

package server

import (
	"context"
	"net/http"
	"strconv"

	player "github.com/JordanRad/play-j/backend/internal/playerservice/gen/player"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeGetTrackByIDResponse returns an encoder for responses returned by the
// player getTrackByID endpoint.
func EncodeGetTrackByIDResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*player.StreamTrackResponse)
		enc := encoder(ctx, w)
		body := NewGetTrackByIDResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetTrackByIDRequest returns a decoder for requests sent to the player
// getTrackByID endpoint.
func DecodeGetTrackByIDRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			trackID uint
			err     error

			params = mux.Vars(r)
		)
		{
			trackIDRaw := params["trackID"]
			v, err2 := strconv.ParseUint(trackIDRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("trackID", trackIDRaw, "unsigned integer"))
			}
			trackID = uint(v)
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetTrackByIDPayload(trackID)

		return payload, nil
	}
}
