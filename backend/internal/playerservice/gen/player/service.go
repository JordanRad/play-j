// Code generated by goa v3.7.0, DO NOT EDIT.
//
// player service
//
// Command:
// $ goa gen github.com/JordanRad/play-j/backend/internal/design/player-service
// -o ./internal/playerservice

package player

import (
	"context"

	playerviews "github.com/JordanRad/play-j/backend/internal/playerservice/gen/player/views"
)

// Player operations
type Service interface {
	// GetTrackByID implements getTrackByID.
	GetTrackByID(context.Context, *GetTrackByIDPayload) (res *MusicFileResponse, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "player"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [1]string{"getTrackByID"}

// GetTrackByIDPayload is the payload type of the player service getTrackByID
// method.
type GetTrackByIDPayload struct {
	// ID of the Track
	TrackID uint
}

// MusicFileResponse is the result type of the player service getTrackByID
// method.
type MusicFileResponse struct {
	File []byte
}

// NewMusicFileResponse initializes result type MusicFileResponse from viewed
// result type MusicFileResponse.
func NewMusicFileResponse(vres *playerviews.MusicFileResponse) *MusicFileResponse {
	return newMusicFileResponse(vres.Projected)
}

// NewViewedMusicFileResponse initializes viewed result type MusicFileResponse
// from result type MusicFileResponse using the given view.
func NewViewedMusicFileResponse(res *MusicFileResponse, view string) *playerviews.MusicFileResponse {
	p := newMusicFileResponseView(res)
	return &playerviews.MusicFileResponse{Projected: p, View: "default"}
}

// newMusicFileResponse converts projected type MusicFileResponse to service
// type MusicFileResponse.
func newMusicFileResponse(vres *playerviews.MusicFileResponseView) *MusicFileResponse {
	res := &MusicFileResponse{
		File: vres.File,
	}
	return res
}

// newMusicFileResponseView projects result type MusicFileResponse to projected
// type MusicFileResponseView using the "default" view.
func newMusicFileResponseView(res *MusicFileResponse) *playerviews.MusicFileResponseView {
	vres := &playerviews.MusicFileResponseView{
		File: res.File,
	}
	return vres
}
