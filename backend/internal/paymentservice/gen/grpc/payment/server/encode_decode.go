// Code generated by goa v3.7.0, DO NOT EDIT.
//
// payment gRPC server encoders and decoders
//
// Command:
// $ goa gen
// github.com/JordanRad/play-j/backend/internal/design/payment-service -o
// ./internal/paymentservice

package server

import (
	"context"

	paymentpb "github.com/JordanRad/play-j/backend/internal/paymentservice/gen/grpc/payment/pb"
	payment "github.com/JordanRad/play-j/backend/internal/paymentservice/gen/payment"
	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc/metadata"
)

// EncodeGetPaymentsByAccountIDResponse encodes responses from the "payment"
// service "getPaymentsByAccountID" endpoint.
func EncodeGetPaymentsByAccountIDResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	result, ok := v.(*payment.PaymentListResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("payment", "getPaymentsByAccountID", "*payment.PaymentListResponse", v)
	}
	resp := NewProtoGetPaymentsByAccountIDResponse(result)
	return resp, nil
}

// DecodeGetPaymentsByAccountIDRequest decodes requests sent to "payment"
// service "getPaymentsByAccountID" endpoint.
func DecodeGetPaymentsByAccountIDRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *paymentpb.GetPaymentsByAccountIDRequest
		ok      bool
	)
	{
		if message, ok = v.(*paymentpb.GetPaymentsByAccountIDRequest); !ok {
			return nil, goagrpc.ErrInvalidType("payment", "getPaymentsByAccountID", "*paymentpb.GetPaymentsByAccountIDRequest", v)
		}
	}
	var payload *payment.GetPaymentsByAccountIDPayload
	{
		payload = NewGetPaymentsByAccountIDPayload(message)
	}
	return payload, nil
}
