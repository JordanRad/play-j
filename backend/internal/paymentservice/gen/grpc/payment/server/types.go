// Code generated by goa v3.7.0, DO NOT EDIT.
//
// payment gRPC server types
//
// Command:
// $ goa gen
// github.com/JordanRad/play-j/backend/internal/design/payment-service -o
// ./internal/paymentservice

package server

import (
	paymentpb "github.com/JordanRad/play-j/backend/internal/paymentservice/gen/grpc/payment/pb"
	payment "github.com/JordanRad/play-j/backend/internal/paymentservice/gen/payment"
)

// NewGetPaymentsByAccountIDPayload builds the payload of the
// "getPaymentsByAccountID" endpoint of the "payment" service from the gRPC
// request type.
func NewGetPaymentsByAccountIDPayload(message *paymentpb.GetPaymentsByAccountIDRequest) *payment.GetPaymentsByAccountIDPayload {
	v := &payment.GetPaymentsByAccountIDPayload{
		AccountID: int(message.AccountId),
		Limit:     int(message.Limit),
	}
	return v
}

// NewProtoGetPaymentsByAccountIDResponse builds the gRPC response type from
// the result of the "getPaymentsByAccountID" endpoint of the "payment" service.
func NewProtoGetPaymentsByAccountIDResponse(result *payment.PaymentListResponse) *paymentpb.GetPaymentsByAccountIDResponse {
	message := &paymentpb.GetPaymentsByAccountIDResponse{
		Total: uint32(result.Total),
	}
	if result.Resources != nil {
		message.Resources = make([]*paymentpb.PaymentResponse, len(result.Resources))
		for i, val := range result.Resources {
			message.Resources[i] = &paymentpb.PaymentResponse{
				Id:            uint32(val.ID),
				CreatedAt:     val.CreatedAt,
				PaymentNumber: val.PaymentNumber,
				Amount:        val.Amount,
			}
		}
	}
	return message
}
