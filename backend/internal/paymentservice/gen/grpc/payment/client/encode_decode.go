// Code generated by goa v3.7.0, DO NOT EDIT.
//
// payment gRPC client encoders and decoders
//
// Command:
// $ goa gen
// github.com/JordanRad/play-j/backend/internal/design/payment-service -o
// ./internal/paymentservice

package client

import (
	"context"

	paymentpb "github.com/JordanRad/play-j/backend/internal/paymentservice/gen/grpc/payment/pb"
	payment "github.com/JordanRad/play-j/backend/internal/paymentservice/gen/payment"
	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildGetPaymentsByAccountIDFunc builds the remote method to invoke for
// "payment" service "getPaymentsByAccountID" endpoint.
func BuildGetPaymentsByAccountIDFunc(grpccli paymentpb.PaymentClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.GetPaymentsByAccountID(ctx, reqpb.(*paymentpb.GetPaymentsByAccountIDRequest), opts...)
		}
		return grpccli.GetPaymentsByAccountID(ctx, &paymentpb.GetPaymentsByAccountIDRequest{}, opts...)
	}
}

// EncodeGetPaymentsByAccountIDRequest encodes requests sent to payment
// getPaymentsByAccountID endpoint.
func EncodeGetPaymentsByAccountIDRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*payment.GetPaymentsByAccountIDPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("payment", "getPaymentsByAccountID", "*payment.GetPaymentsByAccountIDPayload", v)
	}
	return NewProtoGetPaymentsByAccountIDRequest(payload), nil
}

// DecodeGetPaymentsByAccountIDResponse decodes responses from the payment
// getPaymentsByAccountID endpoint.
func DecodeGetPaymentsByAccountIDResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*paymentpb.GetPaymentsByAccountIDResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("payment", "getPaymentsByAccountID", "*paymentpb.GetPaymentsByAccountIDResponse", v)
	}
	if err := ValidateGetPaymentsByAccountIDResponse(message); err != nil {
		return nil, err
	}
	res := NewGetPaymentsByAccountIDResult(message)
	return res, nil
}
