// Code generated by goa v3.7.0, DO NOT EDIT.
//
// payment gRPC client types
//
// Command:
// $ goa gen
// github.com/JordanRad/play-j/backend/internal/design/payment-service -o
// ./internal/paymentservice

package client

import (
	paymentpb "github.com/JordanRad/play-j/backend/internal/paymentservice/gen/grpc/payment/pb"
	payment "github.com/JordanRad/play-j/backend/internal/paymentservice/gen/payment"
	goa "goa.design/goa/v3/pkg"
)

// NewProtoGetPaymentsByAccountIDRequest builds the gRPC request type from the
// payload of the "getPaymentsByAccountID" endpoint of the "payment" service.
func NewProtoGetPaymentsByAccountIDRequest(payload *payment.GetPaymentsByAccountIDPayload) *paymentpb.GetPaymentsByAccountIDRequest {
	message := &paymentpb.GetPaymentsByAccountIDRequest{
		AccountId: int32(payload.AccountID),
		Limit:     int32(payload.Limit),
	}
	return message
}

// NewGetPaymentsByAccountIDResult builds the result type of the
// "getPaymentsByAccountID" endpoint of the "payment" service from the gRPC
// response type.
func NewGetPaymentsByAccountIDResult(message *paymentpb.GetPaymentsByAccountIDResponse) *payment.PaymentListResponse {
	result := &payment.PaymentListResponse{
		Total: uint(message.Total),
	}
	if message.Resources != nil {
		result.Resources = make([]*payment.PaymentResponse, len(message.Resources))
		for i, val := range message.Resources {
			result.Resources[i] = &payment.PaymentResponse{
				ID:            uint(val.Id),
				CreatedAt:     val.CreatedAt,
				PaymentNumber: val.PaymentNumber,
				Amount:        val.Amount,
			}
		}
	}
	return result
}

// ValidateGetPaymentsByAccountIDResponse runs the validations defined on
// GetPaymentsByAccountIDResponse.
func ValidateGetPaymentsByAccountIDResponse(message *paymentpb.GetPaymentsByAccountIDResponse) (err error) {
	if message.Resources == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("resources", "message"))
	}
	return
}

// ValidatePaymentResponse runs the validations defined on PaymentResponse.
func ValidatePaymentResponse(message *paymentpb.PaymentResponse) (err error) {

	return
}
