// Code generated by goa v3.7.0, DO NOT EDIT.
//
// payment gRPC client CLI support package
//
// Command:
// $ goa gen
// github.com/JordanRad/play-j/backend/internal/design/payment-service -o
// ./internal/paymentservice

package client

import (
	"encoding/json"
	"fmt"

	paymentpb "github.com/JordanRad/play-j/backend/internal/paymentservice/gen/grpc/payment/pb"
	payment "github.com/JordanRad/play-j/backend/internal/paymentservice/gen/payment"
)

// BuildGetPaymentsByAccountIDPayload builds the payload for the payment
// getPaymentsByAccountID endpoint from CLI flags.
func BuildGetPaymentsByAccountIDPayload(paymentGetPaymentsByAccountIDMessage string) (*payment.GetPaymentsByAccountIDPayload, error) {
	var err error
	var message paymentpb.GetPaymentsByAccountIDRequest
	{
		if paymentGetPaymentsByAccountIDMessage != "" {
			err = json.Unmarshal([]byte(paymentGetPaymentsByAccountIDMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"accountID\": 3353057982766576702,\n      \"limit\": 757788726954155891\n   }'")
			}
		}
	}
	v := &payment.GetPaymentsByAccountIDPayload{
		AccountID: int(message.AccountId),
		Limit:     int(message.Limit),
	}

	return v, nil
}
