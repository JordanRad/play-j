// Code generated by goa v3.7.0, DO NOT EDIT.
//
// payment HTTP server encoders and decoders
//
// Command:
// $ goa gen
// github.com/JordanRad/play-j/backend/internal/design/payment-service -o
// ./internal/paymentservice

package server

import (
	"context"
	"net/http"
	"strconv"

	payment "github.com/JordanRad/play-j/backend/internal/paymentservice/gen/payment"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeGetAccountPaymentsResponse returns an encoder for responses returned
// by the payment getAccountPayments endpoint.
func EncodeGetAccountPaymentsResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*payment.PaymentListResponse)
		enc := encoder(ctx, w)
		body := NewGetAccountPaymentsResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetAccountPaymentsRequest returns a decoder for requests sent to the
// payment getAccountPayments endpoint.
func DecodeGetAccountPaymentsRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			limit int
			auth  string
			err   error
		)
		{
			limitRaw := r.URL.Query().Get("limit")
			if limitRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("limit", "query string"))
			}
			v, err2 := strconv.ParseInt(limitRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("limit", limitRaw, "integer"))
			}
			limit = int(v)
		}
		auth = r.Header.Get("Authorization")
		if auth == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Authorization", "header"))
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetAccountPaymentsPayload(limit, auth)

		return payload, nil
	}
}

// EncodeCreateAccountPaymentResponse returns an encoder for responses returned
// by the payment createAccountPayment endpoint.
func EncodeCreateAccountPaymentResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*payment.TransactionResponse)
		enc := encoder(ctx, w)
		body := NewCreateAccountPaymentResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeCreateAccountPaymentRequest returns a decoder for requests sent to the
// payment createAccountPayment endpoint.
func DecodeCreateAccountPaymentRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			auth string
			err  error
		)
		auth = r.Header.Get("Authorization")
		if auth == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Authorization", "header"))
		}
		if err != nil {
			return nil, err
		}
		payload := NewCreateAccountPaymentPayload(auth)

		return payload, nil
	}
}

// marshalPaymentPaymentResponseToPaymentResponseResponseBody builds a value of
// type *PaymentResponseResponseBody from a value of type
// *payment.PaymentResponse.
func marshalPaymentPaymentResponseToPaymentResponseResponseBody(v *payment.PaymentResponse) *PaymentResponseResponseBody {
	res := &PaymentResponseResponseBody{
		ID:            v.ID,
		CreatedAt:     v.CreatedAt,
		PaymentNumber: v.PaymentNumber,
		Amount:        v.Amount,
	}

	return res
}
