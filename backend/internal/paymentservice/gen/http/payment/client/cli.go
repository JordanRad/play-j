// Code generated by goa v3.7.0, DO NOT EDIT.
//
// payment HTTP client CLI support package
//
// Command:
// $ goa gen
// github.com/JordanRad/play-j/backend/internal/design/payment-service -o
// ./internal/paymentservice

package client

import (
	"fmt"
	"strconv"

	payment "github.com/JordanRad/play-j/backend/internal/paymentservice/gen/payment"
)

// BuildGetAccountPaymentsPayload builds the payload for the payment
// getAccountPayments endpoint from CLI flags.
func BuildGetAccountPaymentsPayload(paymentGetAccountPaymentsLimit string, paymentGetAccountPaymentsAuth string) (*payment.GetAccountPaymentsPayload, error) {
	var err error
	var limit int
	{
		var v int64
		v, err = strconv.ParseInt(paymentGetAccountPaymentsLimit, 10, 64)
		limit = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for limit, must be INT")
		}
	}
	var auth string
	{
		auth = paymentGetAccountPaymentsAuth
	}
	v := &payment.GetAccountPaymentsPayload{}
	v.Limit = limit
	v.Auth = auth

	return v, nil
}

// BuildCreateAccountPaymentPayload builds the payload for the payment
// createAccountPayment endpoint from CLI flags.
func BuildCreateAccountPaymentPayload(paymentCreateAccountPaymentAuth string) (*payment.CreateAccountPaymentPayload, error) {
	var auth string
	{
		auth = paymentCreateAccountPaymentAuth
	}
	v := &payment.CreateAccountPaymentPayload{}
	v.Auth = auth

	return v, nil
}
