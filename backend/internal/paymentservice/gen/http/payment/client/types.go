// Code generated by goa v3.7.0, DO NOT EDIT.
//
// payment HTTP client types
//
// Command:
// $ goa gen
// github.com/JordanRad/play-j/backend/internal/design/payment-service -o
// ./internal/paymentservice

package client

import (
	payment "github.com/JordanRad/play-j/backend/internal/paymentservice/gen/payment"
	goa "goa.design/goa/v3/pkg"
)

// GetAccountPaymentsResponseBody is the type of the "payment" service
// "getAccountPayments" endpoint HTTP response body.
type GetAccountPaymentsResponseBody struct {
	// Total number of resources
	Total *uint `form:"total,omitempty" json:"total,omitempty" xml:"total,omitempty"`
	// Resournces
	Resources []*PaymentResponseResponseBody `form:"resources,omitempty" json:"resources,omitempty" xml:"resources,omitempty"`
}

// CreateAccountPaymentResponseBody is the type of the "payment" service
// "createAccountPayment" endpoint HTTP response body.
type CreateAccountPaymentResponseBody struct {
	// Payment Unique Number
	PaymentNumber *string `form:"paymentNumber,omitempty" json:"paymentNumber,omitempty" xml:"paymentNumber,omitempty"`
	// Operation status
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// PaymentResponseResponseBody is used to define fields on response body types.
type PaymentResponseResponseBody struct {
	// Id
	ID *uint `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Time of creation
	CreatedAt *string `form:"createdAt,omitempty" json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// Payment Number
	PaymentNumber *string `form:"paymentNumber,omitempty" json:"paymentNumber,omitempty" xml:"paymentNumber,omitempty"`
	// Payment amount
	Amount *float32 `form:"amount,omitempty" json:"amount,omitempty" xml:"amount,omitempty"`
}

// NewGetAccountPaymentsPaymentListResponseOK builds a "payment" service
// "getAccountPayments" endpoint result from a HTTP "OK" response.
func NewGetAccountPaymentsPaymentListResponseOK(body *GetAccountPaymentsResponseBody) *payment.PaymentListResponse {
	v := &payment.PaymentListResponse{
		Total: *body.Total,
	}
	v.Resources = make([]*payment.PaymentResponse, len(body.Resources))
	for i, val := range body.Resources {
		v.Resources[i] = unmarshalPaymentResponseResponseBodyToPaymentPaymentResponse(val)
	}

	return v
}

// NewCreateAccountPaymentTransactionResponseOK builds a "payment" service
// "createAccountPayment" endpoint result from a HTTP "OK" response.
func NewCreateAccountPaymentTransactionResponseOK(body *CreateAccountPaymentResponseBody) *payment.TransactionResponse {
	v := &payment.TransactionResponse{
		PaymentNumber: *body.PaymentNumber,
		Message:       *body.Message,
	}

	return v
}

// ValidateGetAccountPaymentsResponseBody runs the validations defined on
// GetAccountPaymentsResponseBody
func ValidateGetAccountPaymentsResponseBody(body *GetAccountPaymentsResponseBody) (err error) {
	if body.Total == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total", "body"))
	}
	if body.Resources == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("resources", "body"))
	}
	for _, e := range body.Resources {
		if e != nil {
			if err2 := ValidatePaymentResponseResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateCreateAccountPaymentResponseBody runs the validations defined on
// CreateAccountPaymentResponseBody
func ValidateCreateAccountPaymentResponseBody(body *CreateAccountPaymentResponseBody) (err error) {
	if body.PaymentNumber == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("paymentNumber", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidatePaymentResponseResponseBody runs the validations defined on
// PaymentResponseResponseBody
func ValidatePaymentResponseResponseBody(body *PaymentResponseResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("createdAt", "body"))
	}
	if body.PaymentNumber == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("paymentNumber", "body"))
	}
	if body.Amount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("amount", "body"))
	}
	return
}
