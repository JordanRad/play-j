// Code generated by goa v3.7.0, DO NOT EDIT.
//
// subscription HTTP client encoders and decoders
//
// Command:
// $ goa gen
// github.com/JordanRad/play-j/backend/internal/design/payment-service -o
// ./internal/paymentservice

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	subscription "github.com/JordanRad/play-j/backend/internal/paymentservice/gen/subscription"
	goahttp "goa.design/goa/v3/http"
)

// BuildGetAccountSubscriptionStatusRequest instantiates a HTTP request object
// with method and path set to call the "subscription" service
// "getAccountSubscriptionStatus" endpoint
func (c *Client) BuildGetAccountSubscriptionStatusRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetAccountSubscriptionStatusSubscriptionPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("subscription", "getAccountSubscriptionStatus", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetAccountSubscriptionStatusRequest returns an encoder for requests
// sent to the subscription getAccountSubscriptionStatus server.
func EncodeGetAccountSubscriptionStatusRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*subscription.GetAccountSubscriptionStatusPayload)
		if !ok {
			return goahttp.ErrInvalidType("subscription", "getAccountSubscriptionStatus", "*subscription.GetAccountSubscriptionStatusPayload", v)
		}
		{
			head := p.Auth
			req.Header.Set("Authorization", head)
		}
		return nil
	}
}

// DecodeGetAccountSubscriptionStatusResponse returns a decoder for responses
// returned by the subscription getAccountSubscriptionStatus endpoint.
// restoreBody controls whether the response body should be restored after
// having been read.
func DecodeGetAccountSubscriptionStatusResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetAccountSubscriptionStatusResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("subscription", "getAccountSubscriptionStatus", err)
			}
			err = ValidateGetAccountSubscriptionStatusResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("subscription", "getAccountSubscriptionStatus", err)
			}
			res := NewGetAccountSubscriptionStatusSubscriptionStatusResponseOK(&body)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("subscription", "getAccountSubscriptionStatus", resp.StatusCode, string(body))
		}
	}
}
