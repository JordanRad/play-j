// Code generated by goa v3.7.0, DO NOT EDIT.
//
// subscription client HTTP transport
//
// Command:
// $ goa gen
// github.com/JordanRad/play-j/backend/internal/design/payment-service -o
// ./internal/paymentservice

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the subscription service endpoint HTTP clients.
type Client struct {
	// GetAccountSubscriptionStatus Doer is the HTTP client used to make requests
	// to the getAccountSubscriptionStatus endpoint.
	GetAccountSubscriptionStatusDoer goahttp.Doer

	// CORS Doer is the HTTP client used to make requests to the  endpoint.
	CORSDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the subscription service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		GetAccountSubscriptionStatusDoer: doer,
		CORSDoer:                         doer,
		RestoreResponseBody:              restoreBody,
		scheme:                           scheme,
		host:                             host,
		decoder:                          dec,
		encoder:                          enc,
	}
}

// GetAccountSubscriptionStatus returns an endpoint that makes HTTP requests to
// the subscription service getAccountSubscriptionStatus server.
func (c *Client) GetAccountSubscriptionStatus() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetAccountSubscriptionStatusRequest(c.encoder)
		decodeResponse = DecodeGetAccountSubscriptionStatusResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetAccountSubscriptionStatusRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetAccountSubscriptionStatusDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("subscription", "getAccountSubscriptionStatus", err)
		}
		return decodeResponse(resp)
	}
}
