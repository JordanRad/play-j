// Code generated by goa v3.7.0, DO NOT EDIT.
//
// account HTTP client CLI support package
//
// Command:
// $ goa gen
// github.com/JordanRad/play-j/backend/internal/design/account-service -o
// ./internal/accountservice

package client

import (
	"encoding/json"
	"fmt"
	"strconv"

	account "github.com/JordanRad/play-j/backend/internal/accountservice/gen/account"
)

// BuildRegisterPayload builds the payload for the account register endpoint
// from CLI flags.
func BuildRegisterPayload(accountRegisterBody string) (*account.RegisterPayload, error) {
	var err error
	var body RegisterRequestBody
	{
		err = json.Unmarshal([]byte(accountRegisterBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"confirmedPassword\": \"Expedita quidem cupiditate ipsam quis.\",\n      \"email\": \"Ipsum illum cupiditate corporis aut.\",\n      \"firstName\": \"Minus sint rerum exercitationem.\",\n      \"lastName\": \"Quo et quasi sint.\",\n      \"password\": \"Natus et enim consectetur sit.\"\n   }'")
		}
	}
	v := &account.RegisterPayload{
		FirstName:         body.FirstName,
		LastName:          body.LastName,
		Email:             body.Email,
		Password:          body.Password,
		ConfirmedPassword: body.ConfirmedPassword,
	}

	return v, nil
}

// BuildLoginPayload builds the payload for the account login endpoint from CLI
// flags.
func BuildLoginPayload(accountLoginBody string) (*account.LoginPayload, error) {
	var err error
	var body LoginRequestBody
	{
		err = json.Unmarshal([]byte(accountLoginBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"email\": \"Et repudiandae cum corporis autem repellendus laudantium.\",\n      \"password\": \"Veniam est fuga vel et est quasi.\"\n   }'")
		}
	}
	v := &account.LoginPayload{
		Email:    body.Email,
		Password: body.Password,
	}

	return v, nil
}

// BuildGetProfilePayload builds the payload for the account getProfile
// endpoint from CLI flags.
func BuildGetProfilePayload(accountGetProfilePaymentsLimit string) (*account.GetProfilePayload, error) {
	var err error
	var paymentsLimit int
	{
		var v int64
		v, err = strconv.ParseInt(accountGetProfilePaymentsLimit, 10, 64)
		paymentsLimit = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for paymentsLimit, must be INT")
		}
	}
	v := &account.GetProfilePayload{}
	v.PaymentsLimit = paymentsLimit

	return v, nil
}
