// Code generated by goa v3.7.0, DO NOT EDIT.
//
// account HTTP server types
//
// Command:
// $ goa gen
// github.com/JordanRad/play-j/backend/internal/design/account-service -o
// ./internal/accountservice

package server

import (
	account "github.com/JordanRad/play-j/backend/internal/accountservice/gen/account"
	goa "goa.design/goa/v3/pkg"
)

// RegisterRequestBody is the type of the "account" service "register" endpoint
// HTTP request body.
type RegisterRequestBody struct {
	// First name of the user
	FirstName *string `form:"firstName,omitempty" json:"firstName,omitempty" xml:"firstName,omitempty"`
	// Last name of the user
	LastName *string `form:"lastName,omitempty" json:"lastName,omitempty" xml:"lastName,omitempty"`
	// Email of the user
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// Password of the user
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
	// Confirmed password of the user
	ConfirmedPassword *string `form:"confirmedPassword,omitempty" json:"confirmedPassword,omitempty" xml:"confirmedPassword,omitempty"`
}

// LoginRequestBody is the type of the "account" service "login" endpoint HTTP
// request body.
type LoginRequestBody struct {
	// Email of the user
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// Password of the user
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// RegisterResponseBody is the type of the "account" service "register"
// endpoint HTTP response body.
type RegisterResponseBody struct {
	// Operation completion status
	Message string `form:"message" json:"message" xml:"message"`
}

// LoginResponseBody is the type of the "account" service "login" endpoint HTTP
// response body.
type LoginResponseBody struct {
	// User's email
	Email string `form:"email" json:"email" xml:"email"`
	// JWT Token
	Token string `form:"token" json:"token" xml:"token"`
	// Refresh token
	RefreshToken string `form:"refresh_token" json:"refresh_token" xml:"refresh_token"`
	// User's role
	Role string `form:"role" json:"role" xml:"role"`
	// User's role
	AccountID *string `form:"accountID,omitempty" json:"accountID,omitempty" xml:"accountID,omitempty"`
}

// GetProfileResponseBody is the type of the "account" service "getProfile"
// endpoint HTTP response body.
type GetProfileResponseBody struct {
	// Operation completion status
	Email string `form:"email" json:"email" xml:"email"`
	// First Name
	FirstName string `form:"first_name" json:"first_name" xml:"first_name"`
	// Last Name
	LastName string `form:"last_name" json:"last_name" xml:"last_name"`
	// Username
	Username string `form:"username" json:"username" xml:"username"`
	// Array of last payments
	LastPayments []*PaymentResponseResponseBody `form:"last_payments" json:"last_payments" xml:"last_payments"`
}

// PaymentResponseResponseBody is used to define fields on response body types.
type PaymentResponseResponseBody struct {
	ID            uint    `form:"id" json:"id" xml:"id"`
	CreatedAt     string  `form:"createdAt" json:"createdAt" xml:"createdAt"`
	PaymentNumber string  `form:"paymentNumber" json:"paymentNumber" xml:"paymentNumber"`
	Amount        float32 `form:"amount" json:"amount" xml:"amount"`
}

// NewRegisterResponseBody builds the HTTP response body from the result of the
// "register" endpoint of the "account" service.
func NewRegisterResponseBody(res *account.RegisterResponse) *RegisterResponseBody {
	body := &RegisterResponseBody{
		Message: res.Message,
	}
	return body
}

// NewLoginResponseBody builds the HTTP response body from the result of the
// "login" endpoint of the "account" service.
func NewLoginResponseBody(res *account.LoginResponse) *LoginResponseBody {
	body := &LoginResponseBody{
		Email:        res.Email,
		Token:        res.Token,
		RefreshToken: res.RefreshToken,
		Role:         res.Role,
		AccountID:    res.AccountID,
	}
	return body
}

// NewGetProfileResponseBody builds the HTTP response body from the result of
// the "getProfile" endpoint of the "account" service.
func NewGetProfileResponseBody(res *account.ProfileResponse) *GetProfileResponseBody {
	body := &GetProfileResponseBody{
		Email:     res.Email,
		FirstName: res.FirstName,
		LastName:  res.LastName,
		Username:  res.Username,
	}
	if res.LastPayments != nil {
		body.LastPayments = make([]*PaymentResponseResponseBody, len(res.LastPayments))
		for i, val := range res.LastPayments {
			body.LastPayments[i] = marshalAccountPaymentResponseToPaymentResponseResponseBody(val)
		}
	}
	return body
}

// NewRegisterPayload builds a account service register endpoint payload.
func NewRegisterPayload(body *RegisterRequestBody) *account.RegisterPayload {
	v := &account.RegisterPayload{
		FirstName:         *body.FirstName,
		LastName:          *body.LastName,
		Email:             *body.Email,
		Password:          *body.Password,
		ConfirmedPassword: *body.ConfirmedPassword,
	}

	return v
}

// NewLoginPayload builds a account service login endpoint payload.
func NewLoginPayload(body *LoginRequestBody) *account.LoginPayload {
	v := &account.LoginPayload{
		Email:    *body.Email,
		Password: *body.Password,
	}

	return v
}

// NewGetProfilePayload builds a account service getProfile endpoint payload.
func NewGetProfilePayload(paymentsLimit int) *account.GetProfilePayload {
	v := &account.GetProfilePayload{}
	v.PaymentsLimit = paymentsLimit

	return v
}

// ValidateRegisterRequestBody runs the validations defined on
// RegisterRequestBody
func ValidateRegisterRequestBody(body *RegisterRequestBody) (err error) {
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Password == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("password", "body"))
	}
	if body.ConfirmedPassword == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("confirmedPassword", "body"))
	}
	if body.FirstName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("firstName", "body"))
	}
	if body.LastName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("lastName", "body"))
	}
	return
}

// ValidateLoginRequestBody runs the validations defined on LoginRequestBody
func ValidateLoginRequestBody(body *LoginRequestBody) (err error) {
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Password == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("password", "body"))
	}
	return
}
