// Code generated by goa v3.7.0, DO NOT EDIT.
//
// account HTTP server encoders and decoders
//
// Command:
// $ goa gen
// github.com/JordanRad/play-j/backend/internal/design/account-service -o
// ./internal/accountservice

package server

import (
	"context"
	"io"
	"net/http"
	"strconv"

	account "github.com/JordanRad/play-j/backend/internal/accountservice/gen/account"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeRegisterResponse returns an encoder for responses returned by the
// account register endpoint.
func EncodeRegisterResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*account.RegisterResponse)
		enc := encoder(ctx, w)
		body := NewRegisterResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeRegisterRequest returns a decoder for requests sent to the account
// register endpoint.
func DecodeRegisterRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body RegisterRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateRegisterRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewRegisterPayload(&body)

		return payload, nil
	}
}

// EncodeLoginResponse returns an encoder for responses returned by the account
// login endpoint.
func EncodeLoginResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*account.LoginResponse)
		enc := encoder(ctx, w)
		body := NewLoginResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeLoginRequest returns a decoder for requests sent to the account login
// endpoint.
func DecodeLoginRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body LoginRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateLoginRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewLoginPayload(&body)

		return payload, nil
	}
}

// EncodeGetProfileResponse returns an encoder for responses returned by the
// account getProfile endpoint.
func EncodeGetProfileResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*account.ProfileResponse)
		enc := encoder(ctx, w)
		body := NewGetProfileResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetProfileRequest returns a decoder for requests sent to the account
// getProfile endpoint.
func DecodeGetProfileRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			paymentsLimit int
			err           error
		)
		{
			paymentsLimitRaw := r.URL.Query().Get("payments_limit")
			if paymentsLimitRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("payments_limit", "query string"))
			}
			v, err2 := strconv.ParseInt(paymentsLimitRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("paymentsLimit", paymentsLimitRaw, "integer"))
			}
			paymentsLimit = int(v)
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetProfilePayload(paymentsLimit)

		return payload, nil
	}
}

// marshalAccountPaymentResponseToPaymentResponseResponseBody builds a value of
// type *PaymentResponseResponseBody from a value of type
// *account.PaymentResponse.
func marshalAccountPaymentResponseToPaymentResponseResponseBody(v *account.PaymentResponse) *PaymentResponseResponseBody {
	res := &PaymentResponseResponseBody{
		ID:            v.ID,
		CreatedAt:     v.CreatedAt,
		PaymentNumber: v.PaymentNumber,
		Amount:        v.Amount,
	}

	return res
}
