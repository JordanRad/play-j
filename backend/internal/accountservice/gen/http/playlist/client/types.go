// Code generated by goa v3.7.0, DO NOT EDIT.
//
// playlist HTTP client types
//
// Command:
// $ goa gen
// github.com/JordanRad/play-j/backend/internal/design/account-service -o
// ./internal/accountservice

package client

import (
	playlist "github.com/JordanRad/play-j/backend/internal/accountservice/gen/playlist"
	goa "goa.design/goa/v3/pkg"
)

// GetAccountPlaylistCollectionRequestBody is the type of the "playlist"
// service "getAccountPlaylistCollection" endpoint HTTP request body.
type GetAccountPlaylistCollectionRequestBody struct {
	AccountID *uint `form:"accountID,omitempty" json:"accountID,omitempty" xml:"accountID,omitempty"`
}

// CreateAccountPlaylistRequestBody is the type of the "playlist" service
// "createAccountPlaylist" endpoint HTTP request body.
type CreateAccountPlaylistRequestBody struct {
	// Playlist name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// RenameAccountPlaylistRequestBody is the type of the "playlist" service
// "renameAccountPlaylist" endpoint HTTP request body.
type RenameAccountPlaylistRequestBody struct {
	// New playlist name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// GetAccountPlaylistCollectionResponseBody is the type of the "playlist"
// service "getAccountPlaylistCollection" endpoint HTTP response body.
type GetAccountPlaylistCollectionResponseBody struct {
	// Number of resources
	Total *int32 `form:"total,omitempty" json:"total,omitempty" xml:"total,omitempty"`
	// Operation completion status
	Resources []*AccountPlaylistResponseResponseBody `form:"resources,omitempty" json:"resources,omitempty" xml:"resources,omitempty"`
}

// CreateAccountPlaylistResponseBody is the type of the "playlist" service
// "createAccountPlaylist" endpoint HTTP response body.
type CreateAccountPlaylistResponseBody struct {
	// Operation completion status
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// RenameAccountPlaylistResponseBody is the type of the "playlist" service
// "renameAccountPlaylist" endpoint HTTP response body.
type RenameAccountPlaylistResponseBody struct {
	// Operation completion status
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteAccountPlaylistResponseBody is the type of the "playlist" service
// "deleteAccountPlaylist" endpoint HTTP response body.
type DeleteAccountPlaylistResponseBody struct {
	// Operation completion status
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetAccountPlaylistResponseBody is the type of the "playlist" service
// "getAccountPlaylist" endpoint HTTP response body.
type GetAccountPlaylistResponseBody struct {
	// Playlist id
	ID *int32 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Playlist name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Array of TrackIDs
	TrackIDs []int32 `form:"trackIDs,omitempty" json:"trackIDs,omitempty" xml:"trackIDs,omitempty"`
}

// AddTrackToAccountPlaylistResponseBody is the type of the "playlist" service
// "addTrackToAccountPlaylist" endpoint HTTP response body.
type AddTrackToAccountPlaylistResponseBody struct {
	// Operation completion status
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// RemoveTrackFromAccountPlaylistResponseBody is the type of the "playlist"
// service "removeTrackFromAccountPlaylist" endpoint HTTP response body.
type RemoveTrackFromAccountPlaylistResponseBody struct {
	// Operation completion status
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// AccountPlaylistResponseResponseBody is used to define fields on response
// body types.
type AccountPlaylistResponseResponseBody struct {
	// Playlist id
	ID *int32 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Playlist name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Array of TrackIDs
	TrackIDs []int32 `form:"trackIDs,omitempty" json:"trackIDs,omitempty" xml:"trackIDs,omitempty"`
}

// NewGetAccountPlaylistCollectionRequestBody builds the HTTP request body from
// the payload of the "getAccountPlaylistCollection" endpoint of the "playlist"
// service.
func NewGetAccountPlaylistCollectionRequestBody(p *playlist.GetAccountPlaylistCollectionPayload) *GetAccountPlaylistCollectionRequestBody {
	body := &GetAccountPlaylistCollectionRequestBody{
		AccountID: p.AccountID,
	}
	return body
}

// NewCreateAccountPlaylistRequestBody builds the HTTP request body from the
// payload of the "createAccountPlaylist" endpoint of the "playlist" service.
func NewCreateAccountPlaylistRequestBody(p *playlist.CreateAccountPlaylistPayload) *CreateAccountPlaylistRequestBody {
	body := &CreateAccountPlaylistRequestBody{
		Name: p.Name,
	}
	return body
}

// NewRenameAccountPlaylistRequestBody builds the HTTP request body from the
// payload of the "renameAccountPlaylist" endpoint of the "playlist" service.
func NewRenameAccountPlaylistRequestBody(p *playlist.RenameAccountPlaylistPayload) *RenameAccountPlaylistRequestBody {
	body := &RenameAccountPlaylistRequestBody{
		Name: p.Name,
	}
	return body
}

// NewGetAccountPlaylistCollectionAccountPlaylistCollectionResponseOK builds a
// "playlist" service "getAccountPlaylistCollection" endpoint result from a
// HTTP "OK" response.
func NewGetAccountPlaylistCollectionAccountPlaylistCollectionResponseOK(body *GetAccountPlaylistCollectionResponseBody) *playlist.AccountPlaylistCollectionResponse {
	v := &playlist.AccountPlaylistCollectionResponse{
		Total: *body.Total,
	}
	v.Resources = make([]*playlist.AccountPlaylistResponse, len(body.Resources))
	for i, val := range body.Resources {
		v.Resources[i] = unmarshalAccountPlaylistResponseResponseBodyToPlaylistAccountPlaylistResponse(val)
	}

	return v
}

// NewCreateAccountPlaylistPlaylistModificationResponseOK builds a "playlist"
// service "createAccountPlaylist" endpoint result from a HTTP "OK" response.
func NewCreateAccountPlaylistPlaylistModificationResponseOK(body *CreateAccountPlaylistResponseBody) *playlist.PlaylistModificationResponse {
	v := &playlist.PlaylistModificationResponse{
		Message: *body.Message,
	}

	return v
}

// NewRenameAccountPlaylistPlaylistModificationResponseOK builds a "playlist"
// service "renameAccountPlaylist" endpoint result from a HTTP "OK" response.
func NewRenameAccountPlaylistPlaylistModificationResponseOK(body *RenameAccountPlaylistResponseBody) *playlist.PlaylistModificationResponse {
	v := &playlist.PlaylistModificationResponse{
		Message: *body.Message,
	}

	return v
}

// NewDeleteAccountPlaylistPlaylistModificationResponseOK builds a "playlist"
// service "deleteAccountPlaylist" endpoint result from a HTTP "OK" response.
func NewDeleteAccountPlaylistPlaylistModificationResponseOK(body *DeleteAccountPlaylistResponseBody) *playlist.PlaylistModificationResponse {
	v := &playlist.PlaylistModificationResponse{
		Message: *body.Message,
	}

	return v
}

// NewGetAccountPlaylistAccountPlaylistResponseOK builds a "playlist" service
// "getAccountPlaylist" endpoint result from a HTTP "OK" response.
func NewGetAccountPlaylistAccountPlaylistResponseOK(body *GetAccountPlaylistResponseBody) *playlist.AccountPlaylistResponse {
	v := &playlist.AccountPlaylistResponse{
		ID:   *body.ID,
		Name: *body.Name,
	}
	v.TrackIDs = make([]int32, len(body.TrackIDs))
	for i, val := range body.TrackIDs {
		v.TrackIDs[i] = val
	}

	return v
}

// NewAddTrackToAccountPlaylistPlaylistModificationResponseOK builds a
// "playlist" service "addTrackToAccountPlaylist" endpoint result from a HTTP
// "OK" response.
func NewAddTrackToAccountPlaylistPlaylistModificationResponseOK(body *AddTrackToAccountPlaylistResponseBody) *playlist.PlaylistModificationResponse {
	v := &playlist.PlaylistModificationResponse{
		Message: *body.Message,
	}

	return v
}

// NewRemoveTrackFromAccountPlaylistPlaylistModificationResponseOK builds a
// "playlist" service "removeTrackFromAccountPlaylist" endpoint result from a
// HTTP "OK" response.
func NewRemoveTrackFromAccountPlaylistPlaylistModificationResponseOK(body *RemoveTrackFromAccountPlaylistResponseBody) *playlist.PlaylistModificationResponse {
	v := &playlist.PlaylistModificationResponse{
		Message: *body.Message,
	}

	return v
}

// ValidateGetAccountPlaylistCollectionResponseBody runs the validations
// defined on GetAccountPlaylistCollectionResponseBody
func ValidateGetAccountPlaylistCollectionResponseBody(body *GetAccountPlaylistCollectionResponseBody) (err error) {
	if body.Total == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total", "body"))
	}
	if body.Resources == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("resources", "body"))
	}
	for _, e := range body.Resources {
		if e != nil {
			if err2 := ValidateAccountPlaylistResponseResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateCreateAccountPlaylistResponseBody runs the validations defined on
// CreateAccountPlaylistResponseBody
func ValidateCreateAccountPlaylistResponseBody(body *CreateAccountPlaylistResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateRenameAccountPlaylistResponseBody runs the validations defined on
// RenameAccountPlaylistResponseBody
func ValidateRenameAccountPlaylistResponseBody(body *RenameAccountPlaylistResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteAccountPlaylistResponseBody runs the validations defined on
// DeleteAccountPlaylistResponseBody
func ValidateDeleteAccountPlaylistResponseBody(body *DeleteAccountPlaylistResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetAccountPlaylistResponseBody runs the validations defined on
// GetAccountPlaylistResponseBody
func ValidateGetAccountPlaylistResponseBody(body *GetAccountPlaylistResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.TrackIDs == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("trackIDs", "body"))
	}
	return
}

// ValidateAddTrackToAccountPlaylistResponseBody runs the validations defined
// on AddTrackToAccountPlaylistResponseBody
func ValidateAddTrackToAccountPlaylistResponseBody(body *AddTrackToAccountPlaylistResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateRemoveTrackFromAccountPlaylistResponseBody runs the validations
// defined on RemoveTrackFromAccountPlaylistResponseBody
func ValidateRemoveTrackFromAccountPlaylistResponseBody(body *RemoveTrackFromAccountPlaylistResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateAccountPlaylistResponseResponseBody runs the validations defined on
// AccountPlaylistResponseResponseBody
func ValidateAccountPlaylistResponseResponseBody(body *AccountPlaylistResponseResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.TrackIDs == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("trackIDs", "body"))
	}
	return
}
